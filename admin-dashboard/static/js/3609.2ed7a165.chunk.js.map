{"version":3,"file":"static/js/3609.2ed7a165.chunk.js","mappings":"6UAQMA,EAAY,CACdC,KAAO,EACPC,OAAS,EACTC,QAAU,GAERC,EAAY,SAACC,EAAMC,GACrB,IAAIC,EAASD,EAAQE,KAAI,SAAAC,GAAC,OAAIA,EAAEJ,EAAN,IACtBK,EAAMC,KAAKD,IAAL,MAAAC,MAAI,OAAQJ,IAClBK,EAAMD,KAAKC,IAAL,MAAAD,MAAI,OAAQJ,IACT,QAATF,GAAmBO,EAAMF,EAAM,MAC/BH,EAASA,EAAOC,KAAI,SAAAK,GAAG,OAAIA,EAAMD,EAAM,IAAMC,EAAM,IAAMA,CAAlC,IACvBH,EAAMC,KAAKD,IAAL,MAAAC,MAAI,OAAQJ,IAClBK,EAAMD,KAAKC,IAAL,MAAAD,MAAI,OAAQJ,KAEtB,IAAIO,GAAUJ,EAAME,GAAO,EAI3B,MAHa,QAATP,GAAkBS,EAAS,MAC3BA,GAAU,KAEPA,CACV,EAqJD,UA7IqB,WAEjB,IAAMC,GAAOC,EAAAA,EAAAA,IAAa,SAACC,GAAD,OAAWA,EAAMF,IAAjB,IACpBG,GAAWC,EAAAA,EAAAA,MACXC,EAAOC,EAAAA,OAAa,IAC1B,EAA4BA,EAAAA,SAAe,CAAEC,IAAKJ,EAASD,MAAMK,IAAKC,IAAKL,EAASD,MAAMM,MAA1F,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAkB,SAACC,GACrB,IAAIC,EAASD,EAAKE,iBAAiB,iBAC/BC,EAAO,CAAC,EAIZ,OAHAF,EAAOG,SAAQ,SAACC,GACZF,EAAKE,EAAMC,MAAQD,EAAME,KAC5B,IACMJ,CACV,EACDX,EAAAA,WAAgB,WACZ,IAtBYf,EAsBR+B,GAtBQ/B,EAsBiB,CAAC,CAACgB,IAAKP,EAAKuB,QAASf,IAAKR,EAAKwB,SAAU,CAACjB,IAAKP,EAAKyB,QAASjB,IAAKR,EAAK0B,UArBjG,CACHnB,IAAKlB,EAAU,MAAOE,GACtBiB,IAAKnB,EAAU,MAAOE,KAoBlBE,EAAMkC,EAAAA,IAAM,OAAOC,QAAQ,CAACnB,EAAOF,KAAOe,EAAYf,IAAKE,EAAOD,KAAOc,EAAYd,KAAMH,EAAKwB,SACpGpC,EAAIqC,GAAG,WAAW,SAACC,GACf1B,EAAKwB,QAAUpC,EAAIuC,SACtB,IACDL,EAAAA,UAAY,yDAA0D,CAAC,GAAGM,MAAMxC,GAChF,IAAIyC,EAASP,EAAAA,OAAS,CAAClB,EAAOF,KAAOe,EAAYf,IAAKE,EAAOD,KAAOc,EAAYd,KAAM,CAClF2B,WAAW,EACXC,KAAMT,EAAAA,KAAO,CACTU,QAASC,EACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,OAErBV,GAAG,WAAW,WACb,MAAmBI,EAAOO,YAApBlC,EAAN,EAAMA,IAAKmC,EAAX,EAAWA,IACPnC,EAAMP,EAAKuB,SAAWhB,EAAMP,EAAKyB,SAAWiB,EAAM1C,EAAKwB,SAAWkB,EAAM1C,EAAK0B,QAC7EhB,GAAU,UAAKD,IAInBC,EAAU,CAAEH,IAAKA,EAAIoC,QAAQ,GAAInC,IAAKkC,EAAIC,QAAQ,IACrD,IAAEV,MAAMxC,GACT,OAAO,WACHA,EAAImD,QACP,CACJ,GAAE,CAACnC,EAAQT,IACZ,IAAM6C,EAAY,yCAAG,WAAOd,GAAP,uFACjBA,EAAEe,kBACE7B,EAAOJ,EAAgBkB,EAAEgB,SACxBC,OAASC,SAAShC,EAAK+B,QAC5B/B,EAAKV,IAAM2C,WAAWjC,EAAKV,KAC3BU,EAAKT,IAAM0C,WAAWjC,EAAKT,KAEvB2C,EAAMC,EAAAA,GAAAA,eAA2BjD,EAASD,MAAMmD,GAPnC,SAQIC,MAAMH,EAAK,CAC5BI,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU3C,KAdR,cAQb4C,EARa,iBAgBAA,EAASC,OAhBT,QAkBG,MAlBH,OAkBRd,SACLrC,EAAS,eACToD,EAAAA,EAAAA,IAAkB,UAAW,gCApBhB,4CAAH,sDAwBlB,OAEI,iCACI,SAAC,KAAD,CACIC,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBpC,WAAS,EACTqC,cAAY,KAChB,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,UAAC,KAAD,YACI,eAAIA,UAAU,0BAAd,4BACA,iBAAMC,QAAS,kBAAM/D,GAAU,EAAhB,EAAoB8D,UAAU,0DAA7C,wBAIR,SAAC,KAAD,WACI,SAAC,KAAD,WACI,UAAC,KAAD,CAAOE,SAAU9B,EAAjB,WACI,iBAAK4B,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,OAApB,2BAAwC,iBAAMH,UAAU,cAAhB,mBACxC,SAAC,KAAD,CAAYI,KAAK,OAAOC,YAAY,sBAAsB1D,KAAK,OAAO2D,aAAc5E,EAASD,MAAMkB,WAEvG,iBAAKqD,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,eAApB,+BAAoD,iBAAMH,UAAU,cAAhB,mBACpD,SAAC,KAAD,CAAYI,KAAK,OAAOC,YAAY,0BAA0B1D,KAAK,eAAe2D,aAAc5E,EAASD,MAAM8E,mBAEnH,iBAAKP,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,UAApB,qBAAqC,iBAAMH,UAAU,cAAhB,mBACrC,SAAC,KAAD,CAAeQ,KAAK,IAAI7D,KAAK,UAAU2D,aAAc5E,EAASD,MAAMgF,cAExE,iBAAKT,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,MAApB,sBAAkC,mDAA8B5E,EAAKyB,QAAnC,QAAoDzB,EAAKuB,QAAzD,QAAyE,iBAAMkD,UAAU,cAAhB,mBAC3G,SAAC,KAAD,CAAYI,KAAK,SAASC,YAAY,iBAAiBK,KAAM,KAAYxF,IAAKK,EAAKyB,QAAS5B,IAAKG,EAAKuB,QAASH,KAAK,MAAMgE,SAAU,SAACrD,GAAD,OAAOrB,GAAU,SAAC2E,GAAQ,OAAO,kBAAKA,GAAZ,IAAe9E,IAAKwB,EAAEgB,OAAO1B,OAAS,GAAhE,EAAmEA,MAAOZ,EAAOF,IAAK+E,UAAQ,KAClO,kBAAMb,UAAU,aAAhB,+DAAmFzE,EAAKyB,QAAxF,QAAyGzB,EAAKuB,QAA9G,WAEJ,iBAAKkD,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,MAApB,uBAAmC,mDAA8B5E,EAAK0B,QAAnC,QAAoD1B,EAAKwB,QAAzD,QAAyE,iBAAMiD,UAAU,cAAhB,mBAC5G,SAAC,KAAD,CAAYI,KAAK,SAASC,YAAY,kBAAkBK,KAAM,KAAYtF,IAAKG,EAAKwB,QAAS7B,IAAKK,EAAK0B,QAASN,KAAK,MAAMgE,SAAU,SAACrD,GAAD,OAAOrB,GAAU,SAAC2E,GAAQ,OAAO,kBAAKA,GAAZ,IAAe7E,IAAKuB,EAAEgB,OAAO1B,OAAS,GAAhE,EAAmEA,MAAOZ,EAAOD,IAAK8E,UAAQ,KACnO,kBAAMb,UAAU,aAAhB,+DAAmFzE,EAAK0B,QAAxF,QAAyG1B,EAAKwB,QAA9G,WAEJ,gBAAKiD,UAAU,OAAf,UACI,gBAAKpB,GAAG,WAEZ,iBAAKoB,UAAU,OAAf,WACI,SAAC,KAAD,CAAYG,QAAQ,UAApB,uBACA,SAAC,KAAD,CAAeK,KAAK,IAAI7D,KAAK,UAAU2D,aAAc5E,EAASD,MAAMqF,cAExE,iBAAKd,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,SAApB,oBAAmC,iBAAMH,UAAU,cAAhB,mBACnC,UAAC,KAAD,CAAaA,UAAU,eAAe,aAAW,yBAAyBrD,KAAK,SAAS2D,aAAc9F,EAAUkB,EAASD,MAAM8C,QAA/H,WACI,mBAAQ3B,MAAM,IAAd,qBACA,mBAAQA,MAAM,IAAd,mBACA,mBAAQA,MAAM,IAAd,4BAGR,gBAAKoD,UAAU,OAAf,UACI,SAAC,KAAD,CAASI,KAAK,SAASW,MAAM,UAAUf,UAAU,OAAjD,+BAY3B,C","sources":["components/CrossingEdit.js"],"sourcesContent":["import React from 'react';\r\nimport * as L from \"leaflet\";\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CFormTextarea, CFormSelect, CButton } from \"@coreui/react\";\r\nimport { useLocation,  useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport {ToastContainer } from 'react-toastify';\r\nimport { useUserStore } from 'src/userStore';\r\nimport Sniper from '../assets/images/sniper.png';\r\nconst statusMap = {\r\n    open : 1,\r\n    closed : 0,\r\n    caution : 2\r\n}\r\nconst getMiddle = (prop, markers) => {\r\n    let values = markers.map(m => m[prop]);\r\n    let min = Math.min(...values);\r\n    let max = Math.max(...values);\r\n    if (prop === 'lon' && (max - min > 180)) {\r\n        values = values.map(val => val < max - 180 ? val + 360 : val);\r\n        min = Math.min(...values);\r\n        max = Math.max(...values);\r\n    }\r\n    let result = (min + max) / 2;\r\n    if (prop === 'lon' && result > 180) {\r\n        result -= 360\r\n    }\r\n    return result;\r\n}\r\n\r\nconst findCenter = (markers) => {\r\n    return {\r\n        lat: getMiddle('lat', markers),\r\n        lon: getMiddle('lon', markers)\r\n    }\r\n}\r\nconst CrossingEdit = () => {\r\n\r\n    const user = useUserStore((state) => state.user);\r\n    const location = useLocation();\r\n    const zoom = React.useRef(15);\r\n    const [latlon, setLatlon] = React.useState({ lat: location.state.lat, lon: location.state.lon })\r\n    const navigate = useNavigate();\r\n    const parseFormtoJson = (form) => {\r\n        let inputs = form.querySelectorAll('.form-control');\r\n        let data = {}\r\n        inputs.forEach((input) => {\r\n            data[input.name] = input.value\r\n        })\r\n        return data;\r\n    }\r\n    React.useEffect(() => {\r\n        let centerPoint = findCenter([{lat: user.max_lat, lon: user.max_lon}, {lat: user.min_lat, lon: user.min_lon}])\r\n        let map = L.map(\"map\").setView([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], zoom.current);\r\n        map.on('zoomend', (e) => {\r\n            zoom.current = map.getZoom();\r\n        })\r\n        L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png?lang=en\", {}).addTo(map);\r\n        let marker = L.marker([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], {\r\n            draggable: true,\r\n            icon: L.icon({\r\n                iconUrl: Sniper,\r\n                iconSize: [50, 50],\r\n                iconAnchor: [0, 0],\r\n            })\r\n        }).on('dragend', () => {\r\n            let { lat, lng } = marker.getLatLng()\r\n            if (lat > user.max_lat || lat < user.min_lat || lng > user.max_lon || lng < user.min_lon) {\r\n                setLatlon({ ...latlon })\r\n                return;\r\n            }\r\n\r\n            setLatlon({ lat: lat.toFixed(4), lon: lng.toFixed(4) })\r\n        }).addTo(map)\r\n        return () => {\r\n            map.remove()\r\n        }\r\n    }, [latlon, user])\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n        data.status = parseInt(data.status)\r\n        data.lat = parseFloat(data.lat)\r\n        data.lon = parseFloat(data.lon)\r\n        // console.log(data)\r\n        let url = Constants.updateCrossing + location.state.id;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n\r\n        if (json.status === 200) {\r\n            navigate('/crossings')\r\n            setSessionMessage('success', 'Record updated Successfully')\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Edit Crossing</h5>\r\n                    <span onClick={() => navigate(-1)} className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</span>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Crossing Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Enter Crossing Name\" name=\"name\" defaultValue={location.state.name}/>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"jurisdiction\">Your jurisdiction<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Enter Your Jurisdiction\" name=\"jurisdiction\" defaultValue={location.state.jurisdiction}/>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"address\">Address<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"address\" defaultValue={location.state.address}></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lat\">Latitude<span> (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Latitude\" step={0.00000001} min={user.min_lat} max={user.max_lat} name=\"lat\" onChange={(e) => setLatlon((p) => { return { ...p, lat: e.target.value } })} value={latlon.lat} required />\r\n                            <span className='error_text'>It should be a valid  Latitude (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lon\">Longitude<span> (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Longitude\" step={0.00000001} max={user.max_lon} min={user.min_lon} name=\"lon\" onChange={(e) => setLatlon((p) => { return { ...p, lon: e.target.value } })} value={latlon.lon} required/>\r\n                            <span className='error_text'>It should be a valid Longitude (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <div id=\"map\"></div>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"comment\">Comments</CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"comment\" defaultValue={location.state.comment}></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"status\">Status<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormSelect className='form-control' aria-label=\"Default select example\" name=\"status\" defaultValue={statusMap[location.state.status]}>\r\n                                <option value=\"0\">Closed</option>\r\n                                <option value=\"1\">Open</option>\r\n                                <option value=\"2\">Caution</option>\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Update\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default CrossingEdit;"],"names":["statusMap","open","closed","caution","getMiddle","prop","markers","values","map","m","min","Math","max","val","result","user","useUserStore","state","location","useLocation","zoom","React","lat","lon","latlon","setLatlon","navigate","useNavigate","parseFormtoJson","form","inputs","querySelectorAll","data","forEach","input","name","value","centerPoint","max_lat","max_lon","min_lat","min_lon","L","setView","current","on","e","getZoom","addTo","marker","draggable","icon","iconUrl","Sniper","iconSize","iconAnchor","getLatLng","lng","toFixed","remove","handleSubmit","preventDefault","target","status","parseInt","parseFloat","url","Constants","id","fetch","method","headers","userToken","body","JSON","stringify","response","json","setSessionMessage","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","className","onClick","onSubmit","htmlFor","type","placeholder","defaultValue","jurisdiction","rows","address","step","onChange","p","required","comment","color"],"sourceRoot":""}