{"version":3,"file":"static/js/3609.702b820e.chunk.js","mappings":"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","sources":["components/CrossingEdit.js"],"sourcesContent":["import React from 'react';\r\nimport * as L from \"leaflet\";\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CFormTextarea, CFormSelect, CButton } from \"@coreui/react\";\r\nimport { useLocation,  useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport {ToastContainer } from 'react-toastify';\r\nimport { useUserStore } from 'src/userStore';\r\nimport Sniper from '../assets/images/sniper.png';\r\nconst statusMap = {\r\n    open : 1,\r\n    closed : 0,\r\n    caution : 2\r\n}\r\nconst getMiddle = (prop, markers) => {\r\n    let values = markers.map(m => m[prop]);\r\n    let min = Math.min(...values);\r\n    let max = Math.max(...values);\r\n    if (prop === 'lon' && (max - min > 180)) {\r\n        values = values.map(val => val < max - 180 ? val + 360 : val);\r\n        min = Math.min(...values);\r\n        max = Math.max(...values);\r\n    }\r\n    let result = (min + max) / 2;\r\n    if (prop === 'lon' && result > 180) {\r\n        result -= 360\r\n    }\r\n    return result;\r\n}\r\n\r\nconst findCenter = (markers) => {\r\n    return {\r\n        lat: getMiddle('lat', markers),\r\n        lon: getMiddle('lon', markers)\r\n    }\r\n}\r\nconst CrossingEdit = () => {\r\n\r\n    const user = useUserStore((state) => state.user);\r\n    const location = useLocation();\r\n    const zoom = React.useRef(15);\r\n    const [jurisdictions, setJurisdictions] = React.useState([]);\r\n    const [selected, setSelected] = React.useState(location.state.jurisdiction)\r\n    const [latlon, setLatlon] = React.useState({ lat: location.state.lat, lon: location.state.lon })\r\n    const navigate = useNavigate();\r\n    const parseFormtoJson = (form) => {\r\n        let inputs = form.querySelectorAll('.form-control');\r\n        let data = {}\r\n        inputs.forEach((input) => {\r\n            data[input.name] = input.value\r\n        })\r\n        return data;\r\n    }\r\n    React.useEffect(() => {\r\n        let centerPoint = findCenter([{lat: user.max_lat, lon: user.max_lon}, {lat: user.min_lat, lon: user.min_lon}])\r\n        let map = L.map(\"map\").setView([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], zoom.current);\r\n        map.on('zoomend', (e) => {\r\n            zoom.current = map.getZoom();\r\n        })\r\n        L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png?lang=en\", {}).addTo(map);\r\n        let marker = L.marker([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], {\r\n            draggable: true,\r\n            icon: L.icon({\r\n                iconUrl: Sniper,\r\n                iconSize: [50, 50],\r\n                iconAnchor: [0, 0],\r\n            })\r\n        }).on('dragend', () => {\r\n            let { lat, lng } = marker.getLatLng()\r\n            if (lat > user.max_lat || lat < user.min_lat || lng > user.max_lon || lng < user.min_lon) {\r\n                setLatlon({ ...latlon })\r\n                return;\r\n            }\r\n\r\n            setLatlon({ lat: lat.toFixed(4), lon: lng.toFixed(4) })\r\n        }).addTo(map)\r\n        return () => {\r\n            map.remove()\r\n        }\r\n    }, [latlon, user])\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let response = await fetch(Constants.jurisdictionList + `?per_page=100&page_number=1`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let payload = await response.json()\r\n            setJurisdictions(payload.data);\r\n        })();\r\n    }, [])\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n        data.status = parseInt(data.status)\r\n        data.lat = parseFloat(data.lat)\r\n        data.lon = parseFloat(data.lon)\r\n        // console.log(data)\r\n        let url = Constants.updateCrossing + location.state.id;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n\r\n        if (json.status === 200) {\r\n            navigate('/crossings')\r\n            setSessionMessage('success', 'Record updated Successfully')\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Edit Crossing</h5>\r\n                    <span onClick={() => navigate(-1)} className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</span>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        \r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Jurisdiction<span className=\"text-danger\">*</span></CFormLabel>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter Jurisdiction\" name=\"jurisdiction\" required /> */}\r\n                            <CFormSelect\r\n                                className='form-control'\r\n                                value={selected}\r\n                                disabled={jurisdictions.length < 2}\r\n                                onChange={(e) => setSelected(e.target.value)}\r\n                                name='jurisdiction'\r\n                                required>\r\n                                {jurisdictions.map((item, index) => (\r\n                                    <option value={item.short_name} key={index}>{item.name}</option>\r\n                                ))}\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Crossing Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Enter Crossing Name\" name=\"name\" defaultValue={location.state.name}/>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"address\">Address<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"address\" defaultValue={location.state.address}></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lat\">Latitude<span> (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Latitude\" step={0.00000001} min={user.min_lat} max={user.max_lat} name=\"lat\" onChange={(e) => setLatlon((p) => { return { ...p, lat: e.target.value } })} value={latlon.lat} required />\r\n                            <span className='error_text'>It should be a valid  Latitude (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lon\">Longitude<span> (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Longitude\" step={0.00000001} max={user.max_lon} min={user.min_lon} name=\"lon\" onChange={(e) => setLatlon((p) => { return { ...p, lon: e.target.value } })} value={latlon.lon} required/>\r\n                            <span className='error_text'>It should be a valid Longitude (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <div id=\"map\"></div>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"comment\">Comments</CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"comment\" defaultValue={location.state.comment}></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"status\">Status<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormSelect className='form-control' aria-label=\"Default select example\" name=\"status\" defaultValue={statusMap[location.state.status]}>\r\n                                <option value=\"0\">Closed</option>\r\n                                <option value=\"1\">Open</option>\r\n                                <option value=\"2\">Caution</option>\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Update\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default CrossingEdit;"],"names":["statusMap","open","closed","caution","getMiddle","prop","markers","values","map","m","min","Math","max","val","result","user","useUserStore","state","location","useLocation","zoom","React","jurisdictions","setJurisdictions","jurisdiction","selected","setSelected","lat","lon","latlon","setLatlon","navigate","useNavigate","parseFormtoJson","form","inputs","querySelectorAll","data","forEach","input","name","value","centerPoint","max_lat","max_lon","min_lat","min_lon","L","setView","current","on","e","getZoom","addTo","marker","draggable","icon","iconUrl","Sniper","iconSize","iconAnchor","getLatLng","lng","toFixed","remove","fetch","Constants","method","headers","userToken","response","json","payload","handleSubmit","preventDefault","target","status","parseInt","parseFloat","url","id","body","JSON","stringify","setSessionMessage","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","className","onClick","onSubmit","htmlFor","disabled","length","onChange","required","item","index","short_name","type","placeholder","defaultValue","rows","address","step","p","comment","color"],"sourceRoot":""}