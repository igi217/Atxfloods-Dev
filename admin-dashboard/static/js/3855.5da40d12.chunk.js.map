{"version":3,"file":"static/js/3855.5da40d12.chunk.js","mappings":"wRA6JA,UAxJiB,WAEb,MAAsCA,EAAAA,SAAe,CAAC,GAAtD,eAAOC,EAAP,KAAoBC,EAApB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAkB,SAACC,GACrB,IAAIC,EAAS,CAAC,EAgBd,OAfA,IAAIC,SAASF,GAAMG,SACf,SAACC,EAAOC,GAEJ,GAAIC,OAAOC,UAAUC,eAAeC,KAAKR,EAAQI,GAAM,CACnD,IAAIK,EAAUT,EAAOI,GAChBM,MAAMC,QAAQF,KAEfA,EAAUT,EAAOI,GAAO,CAACK,IAE7BA,EAAQG,KAAKT,EAChB,MACGH,EAAOI,GAAOD,CAErB,IAEEH,CACV,EACKa,EAAY,yCAAG,WAAOC,GAAP,yFACjBA,EAAEC,iBACEC,EAAOlB,EAAgBgB,EAAEG,QACzBC,EAAMC,EAAAA,GAAAA,aAHO,SAIIC,MAAMF,EAAK,CAC5BG,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUV,KAVR,cAIbW,EAJa,gBAYAA,EAASC,OAZT,OAYbA,EAZa,OAajBC,QAAQC,IAAIF,GAEQ,MAAhBA,EAAKG,SACLnC,EAAS,qBACToC,EAAAA,EAAAA,IAAkB,UAAW,gCAjBhB,4CAAH,sDAqClB,OAdAvC,EAAAA,WAAgB,YACZ,uBAAC,oGACOyB,EAAMC,EAAAA,GAAAA,gBADb,SAEwBC,MAAMF,EAAK,CAC5BG,OAAQ,MACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,sBAN3B,cAEOI,EAFP,gBASoBA,EAASC,OAT7B,OASOA,EATP,OAUGjC,EAAeiC,EAAKZ,MAVvB,0CAAD,EAYH,GAAE,KAGC,iCAEI,SAAC,KAAD,CACIiB,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,KAQhB,SAAC,KAAD,WACI,SAAC,KAAD,WACI,UAAC,KAAD,CAAOC,SAAU9B,EAAjB,WACI,SAAC,KAAD,WACI,SAAC,KAAD,CAAM+B,GAAI,GAAV,UACI,iBAAKC,UAAU,OAAf,WACI,UAAC,KAAD,CAAYC,QAAQ,OAApB,uBAAoC,iBAAMD,UAAU,cAAhB,mBACpC,SAAC,KAAD,CAAYE,KAAK,OAAOC,YAAY,YAAYC,KAAK,OAAOC,UAAQ,YAMhF,gBAAKL,UAAU,OAAf,UACI,SAAC,KAAD,UAEQxC,OAAO8C,KAAKzD,GAAa0D,KAAI,SAAChD,EAAKiD,GAC/B,OACI,UAAC,KAAD,CAAMT,GAAI,GAAgBC,UAAU,qBAAqBS,MAAO,CAAEC,cAAe,cAAjF,WACI,eAAIV,UAAU,OAAd,SAAsBzC,KACtB,SAAC,KAAD,UAEQC,OAAO8C,KAAKzD,EAAYU,IAAMgD,KAAI,SAACI,EAAMC,GACrC,OACI,SAAC,KAAD,CAAMb,GAAI,EAAWC,UAAU,iBAA/B,UACI,SAAC,KAAD,CAAYE,KAAK,WAAY5C,MAAOqD,EAAME,MAAOhE,EAAYU,GAAKoD,GAAOP,KAAK,iBADhEQ,EAIzB,OAGT,kBAAMZ,UAAU,aAAhB,WACI,cAAGA,UAAU,wCADjB,+EAbeQ,EAmB1B,SAiBb,gBAAKR,UAAU,OAAf,UACI,SAAC,KAAD,CAASE,KAAK,SAASY,MAAM,UAAUd,UAAU,OAAjD,+BAY3B,C","sources":["components/RolesAdd.js"],"sourcesContent":["import React from 'react';\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CRow, CCol, CButton, CFormCheck } from \"@coreui/react\";\r\nimport {  useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport { ToastContainer } from 'react-toastify';\r\nconst RolesAdd = () => {\r\n\r\n    const [permissions, setPermissions] = React.useState({});\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const parseFormtoJson = (form) => {\r\n        let output = {};\r\n        new FormData(form).forEach(\r\n            (value, key) => {\r\n                // Check if property already exist\r\n                if (Object.prototype.hasOwnProperty.call(output, key)) {\r\n                    let current = output[key];\r\n                    if (!Array.isArray(current)) {\r\n                        // If it's not an array, convert it to an array.\r\n                        current = output[key] = [current];\r\n                    }\r\n                    current.push(value); // Add the new value to the array.\r\n                } else {\r\n                    output[key] = value;\r\n                }\r\n            }\r\n        );\r\n        return output;\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n        let url = Constants.privilegeAdd;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n        console.log(json);\r\n\r\n        if (json.status === 200) {\r\n            navigate('/privileges/list');\r\n            setSessionMessage('success', 'Record Created Successfully')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let url = Constants.userPermissions;\r\n            let response = await fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            let json = await response.json();\r\n            setPermissions(json.data);\r\n        })()\r\n    }, [])\r\n    return (\r\n\r\n        <>\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            {/* <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Sub-Admin Add</h5>\r\n                    <Link to=\"/crossings\" className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</Link>\r\n                </CCardBody>\r\n            </CCard> */}\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <CRow>\r\n                            <CCol md={12}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Privilege<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"text\" placeholder=\"Privilege\" name=\"name\" required />\r\n                                </div>\r\n                            </CCol>\r\n\r\n                        </CRow>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CRow>\r\n                                {\r\n                                    Object.keys(permissions).map((key, index) => {\r\n                                        return (\r\n                                            <CCol md={12} key={index} className=\"my-1 perm-box-main\" style={{ textTransform: 'capitalize' }}>\r\n                                                <h6 className='my-2'>{key}</h6>\r\n                                                <CRow>\r\n                                                    {\r\n                                                        Object.keys(permissions[key]).map((perm, i) => {\r\n                                                            return (\r\n                                                                <CCol md={3} key={i} className='permission-box'>\r\n                                                                    <CFormCheck type=\"checkbox\"  value={perm} label={permissions[key][perm]} name=\"permissions\" />\r\n                                                                </CCol>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </CRow>\r\n                                                <span className='error_text'>\r\n                                                    <i className='fa-solid fa-exclamation-circle me-2'></i>\r\n                                                    You must check first permission to make other permissions work properly\r\n                                                </span>\r\n                                            </CCol>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                                {/* {\r\n                                    UserPermissions.map((usp, index) => {\r\n                                        return (\r\n\r\n                                            <CCol md={6} key={index} className=\"my-1\" style={{ textTransform: 'capitalize' }}>\r\n                                                <CFormCheck type=\"checkbox\" value={usp} label={usp.replace('_', ' ')} name=\"user_permissions\" />\r\n                                            </CCol>\r\n\r\n                                        )\r\n                                    })\r\n                                } */}\r\n                            </CRow>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Create\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default RolesAdd;"],"names":["React","permissions","setPermissions","navigate","useNavigate","parseFormtoJson","form","output","FormData","forEach","value","key","Object","prototype","hasOwnProperty","call","current","Array","isArray","push","handleSubmit","e","preventDefault","data","target","url","Constants","fetch","method","headers","userToken","body","JSON","stringify","response","json","console","log","status","setSessionMessage","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onSubmit","md","className","htmlFor","type","placeholder","name","required","keys","map","index","style","textTransform","perm","i","label","color"],"sourceRoot":""}