{"version":3,"file":"static/js/5872.1091881a.chunk.js","mappings":"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","sources":["components/CrossingsHistory.js"],"sourcesContent":["import React from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { CCard, CCardBody, CFormLabel, CFormInput, CButton } from \"@coreui/react\";\r\n\r\n\r\nconst covertToExcel = (arr) => {\r\n\r\n    let data = `\"Crossing Name\",\"Crossing Address\",\"Closed/Caution on\",\"Status Changed By\",\"Opened On\",\"Opened By\"\\n`\r\n    arr.forEach((row) => {\r\n        data += `\"${row.crossing.name}\",\"${row.crossing.address}\",\"${new Date(row.created_at).toLocaleString()}\",\"${row.user.name}\",\"${row?.opened_at ? new Date(row?.opened_at).toLocaleString() : ''}\",\"${row.opened_by?.name || ''}\"\\n`\r\n    })\r\n\r\n    return data;\r\n}\r\nconst CrossingsHistory = () => {\r\n\r\n    const [body, setBody] = React.useState({ start: '', end: '' })\r\n    const [data, setData] = React.useState({})\r\n    const [pagination, setPagination] = React.useState({\r\n        per_page: 100,\r\n        page_number: 1\r\n    })\r\n\r\n    const [total, setTotal] = React.useState(0);\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Crossing Name',\r\n            selector: row => row.crossing.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Crossing Address',\r\n            selector: row => row.crossing.address,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Closed/Caution On',\r\n            selector: row => new Date(row.updated_at).toLocaleString(),\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Status Changed By',\r\n            selector: row => row.user?.name ?? \"ATX Admin\",\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Opened on',\r\n            selector: row => (row.opened_at) ? new Date(row.opened_at).toLocaleString() : '',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Opened by',\r\n            selector: row => row.opened_by?.name ?? \"ATX Admin\",\r\n            sortable: true,\r\n        },\r\n    ];\r\n\r\n    const handleDownload = async () => {\r\n        let url = Constants.crossingsHistory;\r\n        let response = await fetch(url + `?per_page=${-1}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n        let data = await response.json();\r\n        let excelStr = covertToExcel(data.data);\r\n\r\n        let blob = new Blob([excelStr], {type: 'text/csv'})\r\n        let dUrl = URL.createObjectURL(blob);\r\n        let a = document.createElement('a')\r\n        a.href = dUrl\r\n        a.download = 'closurehistory.csv'\r\n        document.body.appendChild(a)\r\n        a.click();\r\n\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n\r\n        let formData = new FormData(e.target)\r\n        let start = new Date(formData.get('start')).toISOString()\r\n        let end = new Date(formData.get('end')).toISOString()\r\n        setBody({ start, end })\r\n\r\n\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let url = Constants.crossingsHistory;\r\n\r\n\r\n        (async () => {\r\n            let response = await fetch(url + `?per_page=${pagination.per_page}&page_number=${pagination.page_number}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            let data = await response.json();\r\n            setData(data.data);\r\n            setTotal(data.total);\r\n\r\n\r\n        })()\r\n    }, [pagination, body])\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                className=\"history-table\"\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"d-inline text-uppercase\">Crossing Closures History</h5>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <form className=\"row\" onSubmit={handleSearch}>\r\n                        <div className=\"col-4\">\r\n                            <CFormLabel>Start DateTime</CFormLabel>\r\n                            <CFormInput type=\"datetime-local\" className=\"search-text\" name=\"start\" />\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <CFormLabel>End DateTime</CFormLabel>\r\n                            <CFormInput type=\"datetime-local\" className=\"search-text\" name=\"end\" />\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <CFormLabel>&nbsp;</CFormLabel>\r\n                            <CButton type=\"submit\" className=\"float-end w-100\" color=\"primary\">Search</CButton>\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <CFormLabel>&nbsp;</CFormLabel>\r\n                            <CButton type=\"button\" className=\"float-end w-100\" onClick={handleDownload} color=\"success\">Download</CButton>\r\n                        </div>\r\n                    </form>\r\n                </CCardBody>\r\n\r\n            </CCard>\r\n\r\n            <DataTable\r\n                columns={columns}\r\n                data={data}\r\n                className=\"history-table\"\r\n                paginationPerPage={100}\r\n                paginationRowsPerPageOptions={[100, 50, 30]}\r\n                pagination\r\n                paginationServer\r\n                paginationTotalRows={total}\r\n                onChangeRowsPerPage={(per_page) => setPagination({ ...pagination, per_page })}\r\n                onChangePage={(page_number, per_page) => setPagination({ ...pagination, page_number })}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CrossingsHistory;"],"names":["covertToExcel","arr","data","forEach","row","crossing","name","address","Date","created_at","toLocaleString","user","opened_at","opened_by","React","start","end","body","setBody","setData","per_page","page_number","pagination","setPagination","total","setTotal","columns","selector","sortable","updated_at","handleDownload","a","url","Constants","fetch","method","headers","userToken","JSON","stringify","response","json","excelStr","blob","Blob","type","dUrl","URL","createObjectURL","document","createElement","href","download","appendChild","click","position","theme","autoClose","hideProgressBar","newestOnTop","className","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onSubmit","e","preventDefault","formData","FormData","target","get","toISOString","color","onClick","paginationPerPage","paginationRowsPerPageOptions","paginationServer","paginationTotalRows","onChangeRowsPerPage","onChangePage"],"sourceRoot":""}