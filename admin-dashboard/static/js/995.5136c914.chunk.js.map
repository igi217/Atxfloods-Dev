{"version":3,"file":"static/js/995.5136c914.chunk.js","mappings":"0WAyGA,EAnGuB,WACnB,OAAkCA,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAa,yCAAG,8GAClBH,GAAa,GACTI,EAAOC,SAASC,cAAc,gBAC9BC,EAAMC,EAAAA,GAAAA,gBAHQ,SAIGC,MAAMF,EAAK,CAC5BG,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,OAGrBC,KAAM,IAAIC,SAASV,KAVL,UAIdW,EAJc,OAYlBf,GAAa,GACRe,EAASC,GAbI,wBAcdC,EAAAA,GAAAA,MAAY,qCACZb,EAAKc,QAfS,4CAkBDH,EAASI,OAlBR,QAkBdC,EAlBc,OAmBlBhB,EAAKc,QAnBa,EAqBsBE,EAAKA,KAAvCC,EArBY,EAqBZA,OAAQC,EArBI,EAqBJA,YAAaC,EArBT,EAqBSA,SAC3BF,EAAOG,SAAQ,SAAAC,GACXR,EAAAA,GAAAA,MAAYQ,EACf,IAEDF,EAASC,SAAQ,SAAAE,GACbT,EAAAA,GAAAA,QAAcS,EACjB,IAEGJ,GACAL,EAAAA,GAAAA,QAAcK,EAAc,0BA/Bd,4CAAH,qDAoCbK,EAAc,yCAAG,yBAAAC,EAAA,6EACnB1B,GAAe,GACXK,EAAMC,EAAAA,GAAAA,gBAFS,SAGEC,MAAMF,EAAK,CAC5BG,OAAQ,MACRC,QAAS,CACLkB,eAAejB,EAAAA,EAAAA,SANJ,cAGfG,EAHe,gBASFA,EAASe,OATP,OASfV,EATe,OAUfW,EAAYC,IAAIC,gBAAgB,IAAIC,KAAK,CAACd,GAAO,CAAEe,KAAM,eAEzDP,EAAIvB,SAAS+B,cAAc,MAC7BC,KAAON,EACTH,EAAEU,SAAW,gBACbV,EAAEW,QACFrC,GAAe,GAhBI,4CAAH,qDAoBpB,OACI,iCACI,SAAC,KAAD,CACIsC,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,KAChB,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,UAAC,KAAD,YACI,iBAAKA,UAAU,MAAf,WACI,gBAAKA,UAAU,WAAf,UACI,eAAIA,UAAU,0BAAd,qCAEJ,gBAAKA,UAAU,WAAf,UACI,iBAAKA,UAAU,kDAAf,WACI,kBAAOC,MAAO,CAAEC,MAAO,SAAWC,QAAQ,OAAOlB,KAAK,SAASmB,MAAM,UAAUJ,UAAU,sBAAzF,SACKnD,GAAY,SAAC,KAAD,CAAUwD,KAAK,KAAKD,MAAM,UAAa,0BAExD,iBAAMH,MAAO,CAAEC,MAAO,SAAWI,QAAS7B,EAAgBuB,UAAU,sBAApE,SACKjD,GAAc,SAAC,KAAD,CAAUsD,KAAK,KAAKD,MAAM,UAAa,kCAKtE,cAAGJ,UAAU,aAAaZ,SAAS,gBAAgBD,KAAMoB,EAAzD,2CAGR,iBAAMC,QAAQ,sBAAsBR,UAAU,qBAA9C,UACI,kBAAOf,KAAK,OAAOwB,KAAK,OAAOC,GAAG,OAAOC,OAAO,QAAQC,SAAU3D,QAIjF,C","sources":["components/ImportCrossing.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { CCard, CCardBody, CSpinner } from \"@coreui/react\";\r\nimport template from '../assets/template.xlsx';\r\n\r\nconst ImportCrossing = () => {\r\n    const [uploading, setUploading] = useState(false)\r\n    const [downloading, setDownloading] = useState(false)\r\n    const handleUploads = async () => {\r\n        setUploading(true)\r\n        let form = document.querySelector('.import-form');\r\n        let url = Constants.crossingsImport;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n\r\n            },\r\n            body: new FormData(form)\r\n        })\r\n        setUploading(false)\r\n        if (!response.ok) {\r\n            toast.error(\"Error while trying to import data\");\r\n            form.reset();\r\n            return;\r\n        }\r\n        let data = await response.json();\r\n        form.reset();\r\n        // console.log(data);\r\n        let { errors, successfull, warnings } = data.data;\r\n        errors.forEach(err => {\r\n            toast.error(err);\r\n        })\r\n\r\n        warnings.forEach(wrr => {\r\n            toast.warning(wrr);\r\n        })\r\n\r\n        if (successfull) {\r\n            toast.success(successfull + \" Imported Seccessfully\");\r\n        }\r\n    }\r\n\r\n\r\n    const handleDownload = async () => {\r\n        setDownloading(true)\r\n        let url = Constants.crossingsExport;\r\n        let response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: userToken()\r\n            }\r\n        })\r\n        let data = await response.text();\r\n        let resObjUrl = URL.createObjectURL(new Blob([data], { type: 'text/csv' }))\r\n\r\n        let a = document.createElement('a')\r\n        a.href = resObjUrl;\r\n        a.download = 'crossings.csv';\r\n        a.click()\r\n        setDownloading(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"d-inline text-uppercase\">Crossing Data Import</h5>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"float-end d-inline-flex justify-content-between\">\r\n                                <label style={{ width: \"200px\" }} htmlFor=\"file\" type=\"submit\" color=\"primary\" className=\"btn btn-primary m-2\">\r\n                                    {uploading ? <CSpinner size=\"sm\" color=\"white\" /> : \"Import Crossing Data\"}\r\n                                </label>\r\n                                <span style={{ width: \"200px\" }} onClick={handleDownload} className=\"btn btn-success m-2\">\r\n                                    {downloading ? <CSpinner size=\"sm\" color=\"white\" /> : \"Export Crossing Data\"}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <a className=\"text-reset\" download=\"template.xlsx\" href={template}>Download Excel Template</a>\r\n                </CCardBody>\r\n            </CCard>\r\n            <form encType=\"multipart/form-data\" className=\"d-none import-form\">\r\n                <input type=\"file\" name=\"file\" id=\"file\" accept=\".xlsx\" onChange={handleUploads} />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImportCrossing;"],"names":["useState","uploading","setUploading","downloading","setDownloading","handleUploads","form","document","querySelector","url","Constants","fetch","method","headers","userToken","body","FormData","response","ok","toast","reset","json","data","errors","successfull","warnings","forEach","err","wrr","handleDownload","a","Authorization","text","resObjUrl","URL","createObjectURL","Blob","type","createElement","href","download","click","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","className","style","width","htmlFor","color","size","onClick","template","encType","name","id","accept","onChange"],"sourceRoot":""}