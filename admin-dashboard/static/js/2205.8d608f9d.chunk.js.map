{"version":3,"file":"static/js/2205.8d608f9d.chunk.js","mappings":"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","sources":["components/SubAdminAdd.js"],"sourcesContent":["import React from 'react';\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CFormTextarea, CFormSelect, CRow, CCol, CButton, CFormCheck } from \"@coreui/react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n/**\r\n * \r\n * @typedef Jurisdiction\r\n * @prop {string} id\r\n * @prop {string} name\r\n * @prop {string} short_name\r\n * @prop {string} max_lat\r\n * @prop {string} min_lat\r\n * @prop {string} max_lon\r\n * @prop {string} min_lon\r\n */\r\n\r\n/**\r\n * @typedef LatLonBound\r\n * @prop {string} max_lat\r\n * @prop {string} min_lat\r\n * @prop {string} max_lon\r\n * @prop {string} min_lon\r\n */\r\nconst SubAdminAdd = () => {\r\n\r\n    const [permissions, setPermissions] = React.useState({});\r\n    const [roles, setRoles] = React.useState([])\r\n\r\n    /**@type {[Jurisdiction[], React.SetStateAction<Jurisdiction[]>]} */\r\n    const [jurisdictions, setJurisdictions] = React.useState([]);\r\n\r\n    /**@type {[LatLonBound, React.SetStateAction<LatLonBound>]} */\r\n    const [latlonbound, setLatlonbound] = React.useState({\r\n        max_lat: '',\r\n        min_lat: '',\r\n        max_lon: '',\r\n        min_lon: ''\r\n    })\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const parseFormtoJson = (form) => {\r\n        let output = {};\r\n        new FormData(form).forEach(\r\n            (value, key) => {\r\n                // Check if property already exist\r\n                if (Object.prototype.hasOwnProperty.call(output, key)) {\r\n                    let current = output[key];\r\n                    if (!Array.isArray(current)) {\r\n                        // If it's not an array, convert it to an array.\r\n                        current = output[key] = [current];\r\n                    }\r\n                    current.push(value); // Add the new value to the array.\r\n                } else {\r\n                    output[key] = value;\r\n                }\r\n            }\r\n        );\r\n        return output;\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            let data = parseFormtoJson(e.target);\r\n            data.is_active = data.is_active === \"true\" ? true : false;\r\n            // console.log(data);\r\n\r\n            let url = Constants.subAdminAdd;\r\n            let response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n            if (response.status !== 200) {\r\n                throw response;\r\n            }\r\n            let json = await response.json();\r\n\r\n\r\n            if (json.status === 200) {\r\n                e.target.reset();\r\n                navigate('/subadmin/list');\r\n                setSessionMessage('success', 'Record Created Successfully')\r\n            }\r\n        } catch (err) {\r\n            let body = await err.json();\r\n            toast.error(body.message);\r\n            Object.keys(body.errors ?? {})?.forEach((key) => {\r\n                toast.error(body.errors[key])\r\n            })\r\n        }\r\n    }\r\n    const checkTargets = (e, arr) => {\r\n        let checkBox = document.querySelectorAll('[name=\"user_permissions\"]')\r\n        if (arr === 'all') {\r\n            checkBox.forEach((check) => {\r\n                check.checked = e.target.checked\r\n            })\r\n            return\r\n        }\r\n        checkBox.forEach((check) => {\r\n            check.checked = false;\r\n            if (arr.includes(check.value)) {\r\n                check.checked = e.target.checked\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {React.ChangeEvent<HTMLSelectElement>} e \r\n     */\r\n    const handleJurisdiction = (e) => {\r\n        let value = e.target.value;\r\n        let selected = jurisdictions.filter((item) => (item.short_name === value))\r\n        if (selected.length <= 0) return;\r\n\r\n        setLatlonbound(selected[0]);\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let url = Constants.userPermissions;\r\n            let response = await fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            let json = await response.json();\r\n            setPermissions(json.data);\r\n            setRoles(json.roles);\r\n        })();\r\n        (async () => {\r\n            let response = await fetch(Constants.jurisdictionList + `?per_page=100&page_number=1`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let payload = await response.json()\r\n            setJurisdictions(payload.data);\r\n        })();\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            {/* <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Sub-Admin Add</h5>\r\n                    <Link to=\"/crossings\" className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</Link>\r\n                </CCardBody>\r\n            </CCard> */}\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <CRow>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">First Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"text\" placeholder=\"Enter First Name\" name=\"first_name\" required />\r\n                                </div>\r\n                            </CCol>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Last Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"text\" placeholder=\"Enter Last Name\" name=\"last_name\" required />\r\n                                </div>\r\n                            </CCol>\r\n                        </CRow>\r\n\r\n                        <CRow>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">User Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"text\" placeholder=\"Enter User Name\" name=\"username\" required />\r\n                                </div>\r\n                            </CCol>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Password<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"password\" placeholder=\"Enter Password\" name=\"password\" pattern='^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,12}$' required />\r\n                                    <span className='error_text'>\r\n                                        <i className='fa-solid fa-exclamation-circle ms-1'></i> Password length should be between 8 and 12 <br />\r\n                                        <i className='fa-solid fa-exclamation-circle ms-1'></i> It must contain atleast 1 lowercase character and 1 uppercase character <br />\r\n                                        <i className='fa-solid fa-exclamation-circle ms-1'></i> It must contain atleast 1 number and 1 symbol <br />\r\n                                    </span>\r\n                                </div>\r\n                            </CCol>\r\n                        </CRow>\r\n\r\n                        <CRow>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Email<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"email\" placeholder=\"Enter Email\" name=\"email\" required />\r\n                                    <span className='error_text'>Should be a valid Email Address</span>\r\n                                </div>\r\n                            </CCol>\r\n                            <CCol md={6}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Contact No<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    <CFormInput type=\"tel\" placeholder=\"Enter Contact Number\" name=\"phone\" required />\r\n                                    <span className='error_text'>Should be a valid Contact Number</span>\r\n                                </div>\r\n                            </CCol>\r\n\r\n                        </CRow>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"address\">Address<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"address\" required></CFormTextarea>\r\n                        </div>\r\n                        <div className='mb-3'>\r\n                            <CCol md={12}>\r\n                                <div className=\"mb-3\">\r\n                                    <CFormLabel htmlFor=\"name\">Jurisdiction<span className=\"text-danger\">*</span></CFormLabel>\r\n                                    {/* <CFormInput type=\"text\" placeholder=\"Enter Jurisdiction\" name=\"jurisdiction\" required /> */}\r\n                                    <CFormSelect\r\n                                        onChange={handleJurisdiction}\r\n                                        name='jurisdiction'\r\n                                        required>\r\n                                        <option value={''} hidden>--Select Jurisdiction--</option>\r\n                                        {jurisdictions.map((item, index) => (\r\n                                            <option value={item.short_name} key={index}>{item.name}</option>\r\n                                        ))}\r\n                                    </CFormSelect>\r\n                                </div>\r\n                            </CCol>\r\n                        </div>\r\n                        <div className=\"mb-3 d-none\">\r\n                            <CFormLabel htmlFor=\"lat\">Latitude Range <span>(Latitude Range : &gt; 25.8419 & &lt; 36.5008)</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CRow>\r\n                                <CCol xs>\r\n                                    <CFormInput value={latlonbound.max_lat} type=\"number\" placeholder=\"Max Latitude\" step={0.00000001} name=\"max_lat\" min={25.8419} max={36.5008} aria-label=\"Max Latitude Range\" readOnly required />\r\n                                    <span className='error_text'>It should be a valid Texus Latitude (Range : &gt; 25.8419 & &lt; 36.5008)</span>\r\n                                </CCol>\r\n                                to\r\n                                <CCol xs>\r\n                                    <CFormInput value={latlonbound.min_lat} readOnly type=\"number\" placeholder=\"Min Latitude\" step={0.00000001} name=\"min_lat\" min={25.8419} max={36.5008} aria-label=\"Min Latitude Range\" required />\r\n                                    <span className='error_text'>It should be a valid Texus Latitude (Range : &gt; 25.8419 & &lt; 36.5008)</span>\r\n                                </CCol>\r\n                            </CRow>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter Your Name\" name=\"lat\" required /> */}\r\n                        </div>\r\n                        <div className=\"mb-3 d-none\">\r\n                            <CFormLabel htmlFor=\"lon\">Longitude Range<span> (Longitude Range : &gt; -106.6168 & &lt; -93.5074)</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CRow>\r\n                                <CCol xs>\r\n                                    <CFormInput type=\"number\" value={latlonbound.max_lon} readOnly placeholder=\"Max Longitude\" step={0.00000001} name=\"max_lon\" max={-93.5074} min={-106.6168} aria-label=\"Max Longitude Range\" required />\r\n                                    <span className='error_text'>It should be a valid Texus Longitude (Range : &gt; -106.6168 & &lt; -93.5074)</span>\r\n                                </CCol>\r\n                                to\r\n                                <CCol xs>\r\n                                    <CFormInput type=\"number\" value={latlonbound.min_lon} readOnly placeholder=\"Min Longitude\" step={0.00000001} name=\"min_lon\" max={-93.5074} min={-106.6168} aria-label=\"Min Longitude Range\" required />\r\n                                    <span className='error_text'>It should be a valid Texus Longitude (Range : &gt; -106.6168 & &lt; -93.5074)</span>\r\n                                </CCol>\r\n                            </CRow>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter Your Name\" name=\"lon\" required /> */}\r\n                        </div>\r\n                        {/* <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"comment\">Comments</CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"comment\"></CFormTextarea>\r\n                        </div> */}\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"status\">Status<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormSelect className='form-control' aria-label=\"Default select example\" name=\"is_active\" required>\r\n                                <option >Select Status</option>\r\n                                <option value={true}>Active</option>\r\n                                <option value={false}>Inactive</option>\r\n                            </CFormSelect>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lon\">User Permissions<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CRow>\r\n                                <CCol md={3} className=\"my-3 fw-bold\" onChange={(e) => checkTargets(e, 'all')}>\r\n                                    <CFormCheck type=\"radio\" label=\"All Privileges\" name='default_permissions' />\r\n                                </CCol>\r\n                                {\r\n                                    roles.map((role, index) => {\r\n                                        return (\r\n                                            <CCol md={3} key={index} className=\"my-3 fw-bold\" onChange={(e) => checkTargets(e, role.permissions)}>\r\n                                                <CFormCheck type=\"radio\" label={role.name} name='default_permissions' />\r\n                                            </CCol>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CRow>\r\n                            <CRow>\r\n                                {\r\n                                    Object.keys(permissions).map((key, index) => {\r\n                                        return (\r\n                                            <CCol md={12} key={index} className=\"my-1 perm-box-main\" style={{ textTransform: 'capitalize' }}>\r\n                                                <h6 className='my-2'>{key}</h6>\r\n                                                <CRow>\r\n                                                    {\r\n                                                        Object.keys(permissions[key]).map((perm, i) => {\r\n                                                            return (\r\n                                                                <CCol md={3} key={i} className='permission-box'>\r\n                                                                    <CFormCheck type=\"checkbox\" value={perm} label={permissions[key][perm]} name=\"user_permissions\" />\r\n                                                                </CCol>\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </CRow>\r\n                                                <span className='error_text'>\r\n                                                    <i className='fa-solid fa-exclamation-circle me-2'></i>\r\n                                                    You must check first permission to make other permissions work properly\r\n                                                </span>\r\n                                            </CCol>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                                {/* {\r\n                                    UserPermissions.map((usp, index) => {\r\n                                        return (\r\n\r\n                                            <CCol md={6} key={index} className=\"my-1\" style={{ textTransform: 'capitalize' }}>\r\n                                                <CFormCheck type=\"checkbox\" value={usp} label={usp.replace('_', ' ')} name=\"user_permissions\" />\r\n                                            </CCol>\r\n\r\n                                        )\r\n                                    })\r\n                                } */}\r\n                            </CRow>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Create\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default SubAdminAdd;"],"names":["React","permissions","setPermissions","roles","setRoles","jurisdictions","setJurisdictions","max_lat","min_lat","max_lon","min_lon","latlonbound","setLatlonbound","navigate","useNavigate","parseFormtoJson","form","output","FormData","forEach","value","key","Object","prototype","hasOwnProperty","call","current","Array","isArray","push","handleSubmit","e","preventDefault","data","target","is_active","url","Constants","fetch","method","headers","userToken","body","JSON","stringify","response","status","json","reset","setSessionMessage","toast","message","keys","errors","checkTargets","arr","checkBox","document","querySelectorAll","check","checked","includes","payload","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","onSubmit","md","className","htmlFor","type","placeholder","name","required","pattern","rows","onChange","selected","filter","item","short_name","length","hidden","map","index","xs","step","min","max","readOnly","label","role","style","textTransform","perm","i","color"],"sourceRoot":""}