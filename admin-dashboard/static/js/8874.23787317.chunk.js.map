{"version":3,"file":"static/js/8874.23787317.chunk.js","mappings":"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","sources":["components/ActionButton.js","components/Notifications.js"],"sourcesContent":["import React from 'react';\r\nimport { CFormSwitch } from '@coreui/react'\r\nimport { useUserStore } from 'src/userStore';\r\nconst ActionButton = (props) => {\r\n    const hasPerm = useUserStore((state) => state.hasPerm)\r\n    let prefix = React.useMemo(() => {\r\n        return props.prefix\r\n    }, [props.prefix])\r\n    return (\r\n        <>\r\n            {\r\n                (props.onChangeStatus) ? <span data-title=\"Change Status\" className={`${!hasPerm(`status_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"me-2 fa-solid fa-check-circle text-primary pointer\" onClick={props.onChangeStatus}></i></span> : ''\r\n            }\r\n            {\r\n                (props.onView) ? <span data-title=\"View Data\" className={`${!hasPerm(`view_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"fa-solid fa-eye pointer me-2 text-info\" onClick={props.onView}></i></span> : ''\r\n            }\r\n\r\n            {\r\n                (props.onEdit) ? <span data-title=\"Edit Data\" className={`${!hasPerm(`change_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"fa-solid fa-pen-to-square pointer me-2 text-warning\" onClick={props.onEdit}></i></span> : ''\r\n            }\r\n\r\n            <span data-title=\"Delete Data\" className={`mx-3 ${!hasPerm(`delete_${prefix}`) ? 'disabled' : \"\"}`}><i className=\" fa-solid fa-trash pointer text-danger\" onClick={props.onDelete}></i></span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActionButton;","import React from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\nimport ActionButton from \"./ActionButton\";\r\nimport { CCard, CCardBody, CFormSwitch, CButton } from \"@coreui/react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nconst Notifications = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [data, setData] = React.useState([]);\r\n    const [pagination, setPagination] = React.useState({\r\n        per_page: 100,\r\n        page_number: 1\r\n    })\r\n    const [load, setLoad] = React.useState(true)\r\n    const [total, setTotal] = React.useState(0);\r\n    const handleChange = () => {\r\n\r\n    }\r\n    const columns = [\r\n        {\r\n            name: 'Camera Display Name',\r\n            selector: row => <>{(row.caution) ? <i className=\"fa-solid fa-exclamation-triangle text-warning\"></i> : \"\"} {row.camera_name}</>\r\n        },\r\n\r\n        {\r\n            name: 'Camera Address',\r\n            selector: row => row.camera_address,\r\n            sortable: true,\r\n        },\r\n\r\n        {\r\n            name: 'No. of Expected Images',\r\n            selector: row => row.expected_image,\r\n            sortable: true,\r\n        },\r\n\r\n        {\r\n            name: 'No. of Received Images',\r\n            selector: row => row.get_image,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'No. of Hours',\r\n            selector: row => row.hours,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Time Range',\r\n            selector: row => new Date(row.from).toLocaleString() + ' to ' + new Date(row.to).toLocaleString(),\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: row => <CFormSwitch size=\"xl\" onChange={() => handleChangeStatus(row.id)} checked={row.status} />,\r\n            sortable: true,\r\n        },\r\n\r\n        {\r\n            name: 'Action',\r\n            selector: (row) => <ActionButton prefix=\"notification\" onEdit={() => handleEdit(row)} onDelete={() => handleDelete(row.id)} onToggleStatus={() => handleChangeStatus(row.id)} />,\r\n            sortable: true\r\n        }\r\n    ];\r\n\r\n    const handleChangeStatus = async (id) => {\r\n        let url = Constants.notificationStatus + id\r\n        let response = await fetch(url, {\r\n            headers: {\r\n                Authorization: userToken()\r\n            }\r\n        })\r\n        if (response.ok) {\r\n            setLoad((p) => !p)\r\n        }\r\n    }\r\n\r\n    const handleEdit = (row) => {\r\n        navigate('/camera/notifications/edit', { state: row });\r\n    }\r\n\r\n    const handleDelete = async (id) => {\r\n        let confirmation = window.confirm(\"Do you really want to delete this record?\");\r\n        if (!confirmation) {\r\n            return;\r\n        }\r\n        let url = Constants.cameraNotificationDelete + id;\r\n        let response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n\r\n            }\r\n        })\r\n        let json = await response.json();\r\n        if (json.status === 200) {\r\n            setLoad(!load);\r\n            toast.success(\"Record deleted successfully!\");\r\n        }\r\n    }\r\n\r\n    const handleActive = () => {\r\n        let url = Constants.notificationActiveAll;\r\n        (async () => {\r\n            let response = await fetch(url, {\r\n                headers: {\r\n                    Authorization: userToken()\r\n                }\r\n            })\r\n            if (response.ok) {\r\n                setLoad((p) => !p)\r\n            }\r\n        })()\r\n    }\r\n\r\n    const handleInctive = () => {\r\n        let url = Constants.notificationInactiveAll;\r\n        (async () => {\r\n            let response = await fetch(url, {\r\n                headers: {\r\n                    Authorization: userToken()\r\n                }\r\n            })\r\n            if (response.ok) {\r\n                setLoad((p) => !p)\r\n            }\r\n        })()\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let { sessionStorage } = window;\r\n        if (sessionStorage.type && sessionStorage.message) {\r\n            toast[sessionStorage.type](sessionStorage.message)\r\n            sessionStorage.clear()\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        let url = Constants.cameraNotifications;\r\n\r\n        (async () => {\r\n            let response = await fetch(url + `?per_page=${pagination.per_page}&page_number=${pagination.page_number}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            console.log(data);\r\n            setData(data.data\r\n            );\r\n            setTotal(data.totalResult);\r\n\r\n\r\n        })()\r\n    }, [pagination, load])\r\n\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"text-uppercase\">Camera Notifications</h5>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <Link to=\"/camera/notifications/add\" className=\"btn text-uppercase btn-primary m-2 float-end\">Add</Link>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 float-end mb-3\">\r\n                    <CButton className=\"mx-2\" color=\"success\" onClick={handleActive}>Activate All</CButton>\r\n                    <CButton color=\"danger\" onClick={handleInctive}>Deactivate All</CButton>\r\n                </div>\r\n            </div>\r\n            <DataTable\r\n                columns={columns}\r\n                data={data}\r\n                pagination\r\n                onSelectedRowsChange={handleChange}\r\n                paginationServer\r\n                paginationPerPage={100}\r\n                paginationRowsPerPageOptions={[100, 50, 30]}\r\n                paginationTotalRows={total}\r\n                className='camera-table'\r\n                onChangeRowsPerPage={(per_page) => setPagination({ ...pagination, per_page })}\r\n                onChangePage={(page_number, per_page) => setPagination({ ...pagination, page_number })}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notifications;"],"names":["props","hasPerm","useUserStore","state","prefix","React","onChangeStatus","className","onClick","onView","onEdit","onDelete","navigate","useNavigate","data","setData","per_page","page_number","pagination","setPagination","load","setLoad","total","setTotal","columns","name","selector","row","caution","camera_name","camera_address","sortable","expected_image","get_image","hours","Date","from","toLocaleString","to","size","onChange","handleChangeStatus","id","checked","status","handleEdit","handleDelete","onToggleStatus","url","Constants","fetch","headers","Authorization","userToken","ok","p","window","confirm","method","response","json","toast","sessionStorage","type","message","clear","console","log","totalResult","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","color","onSelectedRowsChange","paginationServer","paginationPerPage","paginationRowsPerPageOptions","paginationTotalRows","onChangeRowsPerPage","onChangePage"],"sourceRoot":""}