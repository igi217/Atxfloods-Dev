{"version":3,"file":"static/js/8742.68e8eeee.chunk.js","mappings":"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","sources":["components/CameraDetails.js"],"sourcesContent":["import React from \"react\"\r\nimport { CCol, CCard, CCardBody, CButton, CFormInput, CFormLabel, CSpinner } from \"@coreui/react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\n\r\nconst CameraDetails = () => {\r\n\r\n    const { id } = useParams();\r\n    const [body, setBody] = React.useState({ start: '', end: '' })\r\n    const [data, setData] = React.useState({});\r\n    const [num, setNum] = React.useState(64);\r\n    const [reload, setReload] = React.useState({});\r\n\r\n    const scrollBoxRef = React.useRef()\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            // console.log(body)\r\n\r\n            let url = Constants.singleCamera + id + `?per_page=${num}`;\r\n            let response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n            let data = await response.json();\r\n            setData(data.attributes[0]);\r\n        })();\r\n    }, [id, body, num, reload])\r\n\r\n    React.useEffect(() => {\r\n        let intervalId = window.setInterval(() => {\r\n            setReload({})\r\n        }, 20_000)\r\n\r\n        return () => {\r\n            window.clearInterval(intervalId)\r\n        }\r\n    }, [])\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n\r\n        let formData = new FormData(e.target)\r\n        let start = new Date(formData.get('start')).toISOString()\r\n        let end = new Date(formData.get('end')).toISOString()\r\n        setBody({ start, end })\r\n\r\n\r\n    }\r\n    React.useEffect(() => {\r\n        let handleLazyLoad = (e) => {\r\n            let rowheight = scrollBoxRef.current?.scrollHeight;\r\n            if (!rowheight) return;\r\n            if (window.scrollY + window.innerHeight >= rowheight) {\r\n                setNum((p) => p + 64)\r\n            }\r\n        }\r\n        document.addEventListener('scroll', handleLazyLoad)\r\n\r\n        return () => {\r\n            document.removeEventListener('scroll', handleLazyLoad)\r\n        }\r\n    }, [])\r\n    if (!Object.keys(data).length) {\r\n        return <CSpinner color=\"primary\" />\r\n    }\r\n    return (\r\n        <>\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5>Display Name: {data.name}</h5>\r\n                            <h5>Address: {data.address}</h5>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"float-end\">Camera Id: {data.unique_id}</h5>\r\n                            <h5 className=\"float-end\">Latest Image Captured At: {data?.images?.[0]?.created_at ? new Date(data?.images?.[0]?.created_at).toLocaleString() : 'No Image Available'}</h5>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <form className=\"row\" onSubmit={handleSearch}>\r\n                        <div className=\"col-5\">\r\n                            <CFormLabel>Start DateTime</CFormLabel>\r\n                            <CFormInput type=\"datetime-local\" className=\"search-text\" name=\"start\" />\r\n                        </div>\r\n                        <div className=\"col-5\">\r\n                            <CFormLabel>End DateTime</CFormLabel>\r\n                            <CFormInput type=\"datetime-local\" className=\"search-text\" name=\"end\" />\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <CFormLabel style={{ opacity: 0 }}>Search</CFormLabel>\r\n                            <CButton type=\"submit\" className=\"float-end w-100\" color=\"primary\">Search</CButton>\r\n                        </div>\r\n                    </form>\r\n                </CCardBody>\r\n\r\n            </CCard>\r\n\r\n            <div className=\"row\" ref={scrollBoxRef}>\r\n\r\n                {\r\n                    data.images?.map((image, index) => {\r\n                        return (\r\n                            <CCol xs={6} key={index}>\r\n                                <CCard>\r\n                                    <CCardBody className=\"camera-feed\">\r\n                                        {/* <p className=\"float-start\">Temparature: 95<span>&#176;</span>F</p> */}\r\n                                        <p className=\"float-end\">Captured: {new Date(image.created_at).toLocaleString()}</p>\r\n                                        <a className=\"link-dark m-2\" href={`${Constants.base}uploads/${image.image_name}`} target=\"_blank\" rel=\"noreferrer\"> <img className=\"img-fluid\" loading=\"lazy\" src={`${Constants.base}uploads/${image.image_name}`} alt={image.image_name} /></a>\r\n                                    </CCardBody>\r\n                                </CCard>\r\n                            </CCol>\r\n                        )\r\n                    })\r\n\r\n                }\r\n                {!data.images.length ? 'No Images are available' : ''}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default CameraDetails"],"names":["id","useParams","React","start","end","body","setBody","data","setData","num","setNum","reload","setReload","scrollBoxRef","url","Constants","fetch","method","headers","userToken","JSON","stringify","response","json","attributes","intervalId","window","setInterval","clearInterval","handleLazyLoad","e","rowheight","current","scrollHeight","scrollY","innerHeight","p","document","addEventListener","removeEventListener","Object","keys","length","className","name","address","unique_id","images","created_at","Date","toLocaleString","onSubmit","preventDefault","formData","FormData","target","get","toISOString","type","style","opacity","color","ref","map","image","index","xs","href","image_name","rel","loading","src","alt"],"sourceRoot":""}