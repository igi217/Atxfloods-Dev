{"version":3,"file":"static/js/1803.9553a658.chunk.js","mappings":"uRAqHA,UA/G0B,WAEtB,MAAsBA,EAAAA,SAAe,IAA5BC,GAAT,eAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAkB,SAACC,GACrB,IAAIC,EAASD,EAAKE,iBAAiB,iBAC/BC,EAAO,CAAC,EAKZ,OAJAF,EAAOG,SAAQ,SAACC,GACZF,EAAKE,EAAMC,MAAQD,EAAME,KAC5B,IAEMJ,CACV,EACKK,EAAY,yCAAG,WAAOC,GAAP,uFACjBA,EAAEC,iBACEP,EAAOJ,EAAgBU,EAAEE,QAEzBC,EAAMC,EAAAA,GAAAA,0BAAsClB,EAASmB,MAAMC,GAJ9C,SAKIC,MAAMJ,EAAK,CAC5BK,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUnB,KAXR,cAKboB,EALa,gBAaAA,EAASC,OAbT,OAcG,MAdH,OAcRC,SACL5B,EAAS,0BACT6B,EAAAA,EAAAA,IAAkB,UAAW,gCAhBhB,4CAAH,sDAsClB,OAjBAjC,EAAAA,WAAgB,YACZ,uBAAC,oGACOmB,EAAMC,EAAAA,GAAAA,QADb,SAEwBG,MAAMJ,EAAK,CAC5BM,QAAS,CACLS,eAAeR,EAAAA,EAAAA,SAJ1B,cAEOI,EAFP,gBAOoBA,EAASC,OAP7B,OAOOrB,EAPP,OAQGyB,QAAQC,IAAI1B,GACZT,EAAUS,EAAK2B,YATlB,0CAAD,EAWH,GAAE,KAOC,iCACI,SAAC,KAAD,CACIC,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,KAChB,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,UAAC,KAAD,YACI,eAAIA,UAAU,0BAAd,uCACA,iBAAMC,QAAS,kBAAM7C,GAAU,EAAhB,EAAoB4C,UAAU,0DAA7C,wBAIR,SAAC,KAAD,WACI,SAAC,KAAD,WACI,UAAC,KAAD,CAAOE,SAAUnC,EAAjB,WACI,iBAAKiC,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,OAApB,0BAAuC,iBAAMH,UAAU,cAAhB,mBAEvC,SAAC,KAAD,CAAanC,KAAK,YAAYmC,UAAU,eAAeI,UAAQ,EAA/D,UACI,mBAAQtC,MAAOZ,EAASmB,MAAMgC,UAAWC,QAAM,EAA/C,SAAiDpD,EAASmB,MAAMkC,oBAGxE,iBAAKP,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,kBAApB,6BAAqD,iBAAMH,UAAU,cAAhB,mBACrD,SAAC,KAAD,CAAYQ,KAAK,SAAS3C,KAAK,iBAAiB4C,IAAI,IAAIC,UAAQ,EAACC,YAAY,IAAIC,aAAc1D,EAASmB,MAAMwC,kBAC9G,iBAAMb,UAAU,aAAhB,0CAGJ,iBAAKA,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,QAApB,mBAAiC,iBAAMH,UAAU,cAAhB,mBACjC,SAAC,KAAD,CAAYQ,KAAK,SAAS3C,KAAK,QAAQ4C,IAAI,IAAIK,KAAM,KAAOJ,UAAQ,EAACC,YAAY,IAAKC,aAAc1D,EAASmB,MAAM0C,SACnH,iBAAMf,UAAU,aAAhB,iEAGJ,gBAAKA,UAAU,OAAf,UACI,SAAC,KAAD,CAASQ,KAAK,SAASQ,MAAM,UAAUhB,UAAU,OAAjD,+BAY3B,C","sources":["components/NotificationsEdit.js"],"sourcesContent":["import React from 'react';\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CButton, CFormSelect } from \"@coreui/react\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst NotificationsEdit = () => {\r\n\r\n    const [, setCamera] = React.useState([]);\r\n\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const parseFormtoJson = (form) => {\r\n        let inputs = form.querySelectorAll('.form-control');\r\n        let data = {}\r\n        inputs.forEach((input) => {\r\n            data[input.name] = input.value\r\n        })\r\n\r\n        return data;\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n\r\n        let url = Constants.cameraNotificationsUpdate + location.state.id;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n        if (json.status === 200) {\r\n            navigate('/camera/notifications')\r\n            setSessionMessage('success', 'Record Updated Successfully')\r\n\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let url = Constants.cameras;\r\n            let response = await fetch(url, {\r\n                headers: {\r\n                    Authorization: userToken()\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            console.log(data);\r\n            setCamera(data.attributes);\r\n        })();\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Camera Notification Edit</h5>\r\n                    <span onClick={() => navigate(-1)} className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</span>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Display Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter the Display Name\" name=\"name\" required /> */}\r\n                            <CFormSelect name=\"camera_id\" className=\"form-control\" disabled>\r\n                                <option value={location.state.camera_id} hidden>{location.state.camera_name}</option>\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"expected_images\">Expected Images<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" name=\"expected_image\" min=\"1\" required placeholder=\" \" defaultValue={location.state.expected_image}/>\r\n                            <span className='error_text'>Must be a greater than 0</span>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"hours\">Hours<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" name=\"hours\" min=\"0\" step={0.001} required placeholder=\" \"  defaultValue={location.state.hours}/>\r\n                            <span className='error_text'>Must be a valid positive number(upto 2 decimal)</span>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Update\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default NotificationsEdit;"],"names":["React","setCamera","location","useLocation","navigate","useNavigate","parseFormtoJson","form","inputs","querySelectorAll","data","forEach","input","name","value","handleSubmit","e","preventDefault","target","url","Constants","state","id","fetch","method","headers","userToken","body","JSON","stringify","response","json","status","setSessionMessage","Authorization","console","log","attributes","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","className","onClick","onSubmit","htmlFor","disabled","camera_id","hidden","camera_name","type","min","required","placeholder","defaultValue","expected_image","step","hours","color"],"sourceRoot":""}