{"version":3,"file":"static/js/8918.5561e514.chunk.js","mappings":"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","sources":["components/ActionButton.js","components/ChangeStatusModal.js","components/ClosouresTable.js"],"sourcesContent":["import React from 'react';\r\nimport { useUserStore } from 'src/userStore';\r\nconst ActionButton = (props) => {\r\n    const hasPerm = useUserStore((state) => state.hasPerm)\r\n    let prefix = React.useMemo(() => {\r\n        return props.prefix\r\n    }, [props.prefix])\r\n    return (\r\n        <>\r\n            {\r\n                (props.onChangeStatus) ? <span data-title=\"Change Status\" className={`${!hasPerm(`status_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"me-2 fa-solid fa-check-circle text-primary pointer\" onClick={props.onChangeStatus}></i></span> : ''\r\n            }\r\n            {\r\n                (props.onView) ? <span data-title=\"View Data\" className={`${!hasPerm(`view_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"fa-solid fa-eye pointer me-2 text-info\" onClick={props.onView}></i></span> : ''\r\n            }\r\n\r\n            {\r\n                (props.onEdit) ? <span data-title=\"Edit Data\" className={`${!hasPerm(`change_${prefix}`) ? 'disabled' : \"\"}`}><i className=\"fa-solid fa-pen-to-square pointer me-2 text-warning\" onClick={props.onEdit}></i></span> : ''\r\n            }\r\n\r\n            {\r\n                (props.onDelete) ? <span data-title=\"Delete Data\" className={`mx-3 ${!hasPerm(`delete_${prefix}`) ? 'disabled' : \"\"}`}><i className=\" fa-solid fa-trash pointer text-danger\" onClick={props.onDelete}></i></span> : <></>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActionButton;","import React from 'react';\r\nimport { CModal, CModalBody, CForm, CFormSelect, CButton, CFormTextarea, CFormLabel } from '@coreui/react';\r\nimport Constants, { userToken } from 'src/Constants';\r\nconst ChangeStatusModal = ({ id, setCurrent, setLoad }) => {\r\n\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        let status = document.querySelector('#statusInput').value;\r\n        let comment = document.querySelector('#commentInput').value;\r\n        let body = JSON.stringify({ status, comment  })\r\n        let url = Constants.updateCrossingStatus + id;\r\n\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n\r\n            },\r\n            body\r\n        })\r\n        let data = await response.json();\r\n\r\n        if (data.status === 200) {\r\n            setLoad((p) => !p)\r\n            setCurrent(null)\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <CModal\r\n                backdrop={false}\r\n                keyboard={false}\r\n                portal={false}\r\n                visible={id ? true : false}\r\n                alignment=\"center\"\r\n            >\r\n\r\n                <CModalBody>\r\n                    <h6 className='my-3 custom-header'>\r\n                        Update Status\r\n\r\n                        <span onClick={() => setCurrent(null)}>&times;</span>\r\n                    </h6>\r\n                    <CForm>\r\n                        <CFormSelect aria-label=\"Default select example\" id='statusInput'>\r\n                            <option value=\"1\">Open</option>\r\n                            <option value=\"0\">Close</option>\r\n                            <option value=\"2\">Caution</option>\r\n                            <option value=\"3\">Long time closure</option>\r\n                        </CFormSelect>\r\n                        <CFormLabel htmlFor=\"address\">Comments</CFormLabel>\r\n                        <CFormTextarea id=\"commentInput\" rows=\"3\" name=\"comment\"></CFormTextarea>\r\n                        <CButton type='button' className='my-3 px-3' onClick={handleSubmit}>Save</CButton>\r\n\r\n                    </CForm>\r\n\r\n                </CModalBody>\r\n\r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChangeStatusModal;","import React from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Constants, { downloadCSV, userToken } from \"src/Constants\";\r\nimport { CButton, CCard, CCardBody } from \"@coreui/react\";\r\nimport ActionButton from \"./ActionButton\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ChangeStatusModal from \"./ChangeStatusModal\";\r\nconst ClosouresTable = () => {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [data, setData] = React.useState([]);\r\n    const [current, setCurrent] = React.useState(null)\r\n    const [pagination, setPagination] = React.useState({\r\n        per_page: 100,\r\n        page_number: 1\r\n    })\r\n    const [load, setLoad] = React.useState(true)\r\n    const [total, setTotal] = React.useState(0);\r\n    const handleEdit = (row) => {\r\n        navigate('/closures/edit', { state: row });\r\n    }\r\n\r\n    const handleDelete = async (id) => {\r\n        let confirmation = window.confirm(\"Do you really want to delete this record?\");\r\n        if (!confirmation) {\r\n            return;\r\n        }\r\n        let url = Constants.deleteCrossing + id;\r\n        let response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n\r\n            }\r\n        })\r\n        let json = await response.json();\r\n        if (json.status === 200) {\r\n            setLoad(!load);\r\n            toast.success(\"Record deleted successfully!\");\r\n        }\r\n    }\r\n\r\n    const handleView = (row) => {\r\n        console.log(row);\r\n        navigate('/closures/view', { state: row });\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Id',\r\n            selector: row => row.id,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Name',\r\n            selector: row => row.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Jurisdiction',\r\n            selector: row => <span className=\"text-uppercase\">{row.jurisdiction}</span>,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Address',\r\n            selector: row => row.address,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Status',\r\n            selector: row => <span className={`status-${row.status.replace(' ', '')}`}>{row.status}</span>,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Last Modified',\r\n            selector: row => new Date(row.updated_at).toLocaleString(),\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Action',\r\n            selector: (row) => <ActionButton prefix=\"closure\" onView={() => handleView(row)} onEdit={() => handleEdit(row)} onDelete={() => handleDelete(row.id)} onChangeStatus={() => setCurrent(row.id)} />,\r\n            sortable: true\r\n        }\r\n    ];\r\n\r\n    React.useEffect(() => {\r\n        let url = Constants.closures;\r\n\r\n\r\n        (async () => {\r\n            let response = await fetch(url + `?per_page=${pagination.per_page}&page_number=${pagination.page_number}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            // console.log(data);\r\n            setData(data.data);\r\n            setTotal(data.total);\r\n\r\n\r\n        })()\r\n    }, [pagination, load])\r\n\r\n    React.useEffect(() => {\r\n        console.log(current)\r\n    }, [current])\r\n\r\n    async function handleDownload() {\r\n        await downloadCSV(Constants.closures + `?per_page=10000&page_number=1`, \"closures.csv\", \"data\")\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"d-inline text-uppercase\">All Closures</h5>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <CButton\r\n                                onClick={handleDownload}\r\n                                className=\"float-right\">\r\n                                Download CSV\r\n                            </CButton>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n            <DataTable\r\n                columns={columns}\r\n                data={data}\r\n                pagination\r\n                paginationServer\r\n                paginationPerPage={100}\r\n                paginationRowsPerPageOptions={[100, 50, 30]}\r\n                paginationTotalRows={total}\r\n                onChangeRowsPerPage={(per_page) => setPagination({ ...pagination, per_page })}\r\n                onChangePage={(page_number, per_page) => setPagination({ ...pagination, page_number })}\r\n            />\r\n            <ChangeStatusModal id={current} setCurrent={setCurrent} setLoad={setLoad} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClosouresTable;"],"names":["props","hasPerm","useUserStore","state","prefix","React","onChangeStatus","className","onClick","onView","onEdit","onDelete","id","setCurrent","setLoad","handleSubmit","status","document","querySelector","value","comment","body","JSON","stringify","url","Constants","fetch","method","headers","userToken","response","json","p","backdrop","keyboard","portal","visible","alignment","htmlFor","rows","name","type","navigate","useNavigate","data","setData","current","per_page","page_number","pagination","setPagination","load","total","setTotal","handleDelete","window","confirm","toast","columns","selector","row","sortable","jurisdiction","address","replace","Date","updated_at","toLocaleString","console","log","handleView","handleEdit","downloadCSV","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","paginationServer","paginationPerPage","paginationRowsPerPageOptions","paginationTotalRows","onChangeRowsPerPage","onChangePage"],"sourceRoot":""}