{"version":3,"file":"static/js/9883.ea5ee005.chunk.js","mappings":"8QAiGA,UA7FmB,WACf,MAAwBA,EAAAA,SAAe,IAAvC,eAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,EAAAA,SAAe,CAAC,GAA5C,eAAOG,EAAP,KAAeC,EAAf,KA4BA,OAzBAJ,EAAAA,WAAgB,WACZ,IAAIK,EAAMC,EAAAA,GAAAA,QAAoB,oBAC9B,uBAAC,2GACwBC,MAAMF,EAAK,CAC5BG,OAAQ,MACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,SAJ5B,cACOC,EADP,gBAQoBA,EAASC,OAR7B,OAQOX,EARP,OAUGC,EAAQD,EAAKY,YAVhB,0CAAD,EAYH,GAAE,CAACV,IAEJH,EAAAA,WAAgB,WACZ,IAAIc,EAAaC,OAAOC,aAAY,WAChCZ,EAAU,CAAC,EACd,GAAE,KAEH,OAAO,WACHW,OAAOE,cAAcH,EACxB,CACJ,GAAE,IACEb,EAAKiB,QAIN,iCACI,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,SAAC,KAAD,WACI,gBAAKA,UAAU,MAAf,UACI,gBAAKA,UAAU,WAAf,UACI,eAAIA,UAAU,iBAAd,kCAKhB,SAAC,KAAD,UAEQlB,EAAKmB,KAAI,SAACC,GAAD,iBAEL,SAAC,KAAD,CAAMC,GAAI,EAAV,UACI,SAAC,KAAD,CAAOH,UAAU,OAAjB,UACI,UAAC,KAAD,CAAWA,UAAU,cAArB,WACI,2CAAmBE,EAAQE,SAEf,OAAPF,QAAO,IAAPA,GAAA,UAAAA,EAASG,cAAT,eAAiBN,QAAS,GAEvB,SAAC,KAAD,CAAWO,UAAQ,EAACC,YAAU,EAA9B,SAEKL,EAAQG,OAAOJ,KAAI,SAACO,EAAOC,GAExB,OAEI,SAAC,KAAD,WACI,SAAC,KAAD,CAAMC,GAAE,0BAAqBR,EAAQS,IAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAAnF,UACI,gBAAKd,UAAU,oBAAoBe,QAAQ,OAAOC,IAAK7B,EAAAA,GAAAA,KAAiB,WAAaqB,EAAMS,WAAYC,IAAKV,EAAMS,gBAFtGR,EAW3B,OAKH,+CAEV,UAAC,KAAD,CAAMC,GAAE,0BAAqBR,EAAQS,IAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SAAnF,WACI,oDAA4B,UAAAZ,EAAQG,OAAO,UAAf,SAAmBc,WAAa,IAAIC,KAAJ,UAASlB,EAAQG,OAAO,UAAxB,aAAS,EAAmBc,YAAYE,iBAAmB,yBACvH,wCAAgBnB,EAAQoB,sBAjCtBpB,EAAQS,GAFrB,UAfd,SAAC,KAAD,CAAUG,MAAM,WA6D9B,C","sources":["components/CameraFeed.js"],"sourcesContent":["import React from \"react\";\r\nimport { CRow, CCol, CCard, CCardBody, CCarousel, CCarouselItem, CSpinner } from \"@coreui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Constants, { userToken } from \"src/Constants\";\r\nconst CameraFeed = () => {\r\n    const [data, setData] = React.useState([]);\r\n    const [reload, setReload] = React.useState({});\r\n\r\n\r\n    React.useEffect(() => {\r\n        let url = Constants.cameras + '?total_images=32';\r\n        (async () => {\r\n            let response = await fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            // console.log(data);\r\n            setData(data.attributes);\r\n        })()\r\n    }, [reload])\r\n\r\n    React.useEffect(() => {\r\n        let intervalId = window.setInterval(() => {\r\n            setReload({})\r\n        }, 20_000)\r\n\r\n        return () => {\r\n            window.clearInterval(intervalId)\r\n        }\r\n    }, [])\r\n    if (!data.length) {\r\n        return <CSpinner color=\"primary\" />\r\n    }\r\n    return (\r\n        <>\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <h5 className=\"text-uppercase\">Camera Feed</h5>\r\n                        </div>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n            <CRow>\r\n                {\r\n                    data.map((cameras) => (\r\n\r\n                        <CCol xs={6} key={cameras.id}>\r\n                            <CCard className=\"my-2\">\r\n                                <CCardBody className=\"camera-feed\">\r\n                                    <h5>Display Name: {cameras.name}</h5>\r\n                                    {\r\n                                        (cameras?.images?.length > 0) ?\r\n\r\n                                            <CCarousel controls indicators>\r\n\r\n                                                {cameras.images.map((image, index) => {\r\n\r\n                                                    return (\r\n\r\n                                                        <CCarouselItem key={index}>\r\n                                                            <Link to={`/camera-details/${cameras.id}`} style={{ textDecoration: 'none', color: 'black' }}>\r\n                                                                <img className=\"img-fluid d-block\" loading=\"lazy\" src={Constants.base + \"uploads/\" + image.image_name} alt={image.image_name} />\r\n                                                            </Link>\r\n                                                            {/* <CCarouselCaption className=\"d-none d-md-block\">\r\n                                                                <p className=\"fw-bold fs-5\">Captured : {new Date(image.created_at).toLocaleString()}</p>\r\n                                                            </CCarouselCaption> */}\r\n                                                        </CCarouselItem>\r\n\r\n                                                    )\r\n\r\n                                                })}\r\n\r\n                                            </CCarousel>\r\n\r\n\r\n                                            : <p>No Image Available</p>\r\n                                    }\r\n                                    <Link to={`/camera-details/${cameras.id}`} style={{ textDecoration: 'none', color: 'black' }}>\r\n                                        <h5>Latest Image Captured: {cameras.images[0]?.created_at ? new Date(cameras.images[0]?.created_at).toLocaleString() : \"No Image Available\"}</h5>\r\n                                        <h5>Camera Id: {cameras.unique_id}</h5>\r\n                                    </Link>\r\n                                </CCardBody>\r\n                            </CCard>\r\n                        </CCol>\r\n                    ))\r\n                }\r\n            </CRow>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default CameraFeed;"],"names":["React","data","setData","reload","setReload","url","Constants","fetch","method","headers","userToken","response","json","attributes","intervalId","window","setInterval","clearInterval","length","className","map","cameras","xs","name","images","controls","indicators","image","index","to","id","style","textDecoration","color","loading","src","image_name","alt","created_at","Date","toLocaleString","unique_id"],"sourceRoot":""}