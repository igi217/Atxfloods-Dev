{"version":3,"file":"static/js/6746.04cbf04a.chunk.js","mappings":"kWASMA,EAAY,SAACC,EAAMC,GACrB,IAAIC,EAASD,EAAQE,KAAI,SAAAC,GAAC,OAAIA,EAAEJ,EAAN,IACtBK,EAAMC,KAAKD,IAAL,MAAAC,MAAI,OAAQJ,IAClBK,EAAMD,KAAKC,IAAL,MAAAD,MAAI,OAAQJ,IACT,QAATF,GAAmBO,EAAMF,EAAM,MAC/BH,EAASA,EAAOC,KAAI,SAAAK,GAAG,OAAIA,EAAMD,EAAM,IAAMC,EAAM,IAAMA,CAAlC,IACvBH,EAAMC,KAAKD,IAAL,MAAAC,MAAI,OAAQJ,IAClBK,EAAMD,KAAKC,IAAL,MAAAD,MAAI,OAAQJ,KAEtB,IAAIO,GAAUJ,EAAME,GAAO,EAI3B,MAHa,QAATP,GAAkBS,EAAS,MAC3BA,GAAU,KAEPA,CACV,EA4LD,UAnLmB,WAEf,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,IAAa,SAACC,GAAD,OAAWA,EAAMF,IAAjB,IACpBG,EAAOC,EAAAA,OAAa,IAC1B,EAA4BA,EAAAA,SAAe,CAAEC,IAAKP,EAASI,MAAMG,IAAKC,IAAKR,EAASI,MAAMI,MAA1F,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACjB,EAA0CN,EAAAA,SAAe,IAAzD,eAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAgCR,EAAAA,SAAeN,EAASI,MAAMW,cAA9D,eAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BX,EAAAA,SAAeN,EAASI,MAAMc,gBAA5D,eAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8Bd,EAAAA,SAAe,CAAC,GAA9C,eAAOe,EAAP,KAAgBC,EAAhB,KAEMC,EAAkB,SAACC,GACrB,IAD8B,EAC1BC,EAAW,IAAIC,SAASF,GACxBG,EAAO,CAAC,EAFkB,UAGVF,GAHU,IAG9B,IAAI,EAAJ,qBAA8B,CAAC,IAAvBG,EAAsB,QAC1BD,EAAKC,EAAS,IAAMA,EAAS,EAChC,CAL6B,+BAO9B,OAAOD,CACV,EACKE,EAAY,yCAAG,WAAOC,GAAP,uFACjBA,EAAEC,kBACEJ,EAAOJ,EAAgBO,EAAEE,SACxBzB,IAAM0B,WAAWN,EAAKpB,KAC3BoB,EAAKnB,IAAMyB,WAAWN,EAAKnB,KAC3B0B,QAAQC,IAAIR,GACRS,EAAMC,EAAAA,GAAAA,cAA0BrC,EAASI,MAAMkC,GANlC,SAOIC,MAAMH,EAAK,CAC5BI,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUlB,KAbR,cAObmB,EAPa,iBAeAA,EAASC,OAfT,QAiBG,MAjBH,OAiBRC,SACLrC,EAAS,aACTsC,EAAAA,EAAAA,IAAkB,UAAW,iCAnBhB,4CAAH,sDAyBlB3C,EAAAA,WAAgB,WACZ,IAtDYf,EAsDR2D,GAtDQ3D,EAsDiB,CAAC,CAAEgB,IAAKL,EAAKiD,QAAS3C,IAAKN,EAAKkD,SAAW,CAAE7C,IAAKL,EAAKmD,QAAS7C,IAAKN,EAAKoD,UArDpG,CACH/C,IAAKlB,EAAU,MAAOE,GACtBiB,IAAKnB,EAAU,MAAOE,KAoDlBE,EAAM8D,EAAAA,IAAM,OAAOC,QAAQ,CAAC/C,EAAOF,KAAO2C,EAAY3C,IAAKE,EAAOD,KAAO0C,EAAY1C,KAAMH,EAAKoD,SACpGhE,EAAIiE,GAAG,WAAW,SAAC5B,GACfzB,EAAKoD,QAAUhE,EAAIkE,SACtB,IACDJ,EAAAA,UAAY,yDAA0D,CAAC,GAAGK,MAAMnE,GAChF,IAAIoE,EAASN,EAAAA,OAAS,CAAC9C,EAAOF,KAAO2C,EAAY3C,IAAKE,EAAOD,KAAO0C,EAAY1C,KAAM,CAClFsD,WAAW,EACXC,KAAMR,EAAAA,KAAO,CACTS,QAASC,EACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,OAErBT,GAAG,WAAW,WACb,MAAmBG,EAAOO,YAApB7D,EAAN,EAAMA,IAAK8D,EAAX,EAAWA,IACP9D,EAAML,EAAKiD,SAAW5C,EAAML,EAAKmD,SAAWgB,EAAMnE,EAAKkD,SAAWiB,EAAMnE,EAAKoD,QAC7E5C,GAAU,UAAKD,IAInBC,EAAU,CAAEH,IAAKA,EAAI+D,QAAQ,GAAI9D,IAAK6D,EAAIC,QAAQ,IACrD,IAAEV,MAAMnE,GACT,OAAO,WACHA,EAAI8E,QACP,CACJ,GAAE,CAAC9D,EAAQP,EAAMmB,IAClBf,EAAAA,WAAgB,YACZ,uBAAC,2GACwBiC,MAAMF,EAAAA,GAAAA,iBAAA,8BAA4D,CACnFG,OAAQ,MACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,sBAL3B,cACOI,EADP,gBAQuBA,EAASC,OARhC,OAQOyB,EARP,OASG1D,EAAiB0D,EAAQ7C,MAT5B,0CAAD,EAWH,GAAE,IAMH,OAEI,iCAEI,SAAC,KAAD,CACI8C,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBlB,WAAS,EACTmB,cAAY,KAGhB,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,UAAC,KAAD,YACI,eAAIA,UAAU,0BAAd,6BACA,SAAC,KAAD,CAAMC,GAAG,WAAWD,UAAU,0DAA9B,wBAIR,SAAC,KAAD,WACI,SAAC,KAAD,WACI,UAAC,KAAD,CAAOE,SAAUvD,EAAjB,WACA,iBAAKqD,UAAU,OAAf,WACQ,UAAC,KAAD,CAAYG,QAAQ,OAApB,0BAAuC,iBAAMH,UAAU,cAAhB,mBAEvC,SAAC,KAAD,CACIA,UAAU,eACVI,MAAOtE,EACPuE,SAAU1E,EAAc2E,OAAS,EACjCC,SAAU,SAAC3D,GAAD,OAAOb,EAAYa,EAAEE,OAAOsD,MAA5B,EACVI,KAAK,eACLC,UAAQ,EANZ,SAOK9E,EAAcpB,KAAI,SAACmG,EAAMC,GAAP,OACf,mBAAQP,MAAOM,EAAKE,WAApB,SAA6CF,EAAKF,MAAbG,EADtB,UAK3B,iBAAKX,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,OAApB,0BAAuC,iBAAMH,UAAU,cAAhB,mBACvC,SAAC,KAAD,CAAYa,KAAK,OAAOC,YAAY,kBAAkBN,KAAK,OAAOC,UAAQ,EAACM,aAAcjG,EAASI,MAAMsF,WAG5G,iBAAKR,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,UAApB,qBAAqC,iBAAMH,UAAU,cAAhB,mBACrC,SAAC,KAAD,CAAegB,KAAK,IAAIR,KAAK,UAAUC,UAAQ,EAACM,aAAcjG,EAASI,MAAM+F,cAEjF,iBAAKjB,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,OAApB,uBAAoC,iBAAMH,UAAU,cAAhB,mBACpC,SAAC,KAAD,CAAYa,KAAK,OAAOC,YAAY,mBAAmBN,KAAK,YAAYC,UAAQ,EAACM,aAAcjG,EAASI,MAAMgG,gBAElH,gBAAKlB,UAAU,OAAf,UACI,SAAC,KAAD,CAAamB,KAAK,KAAKnB,UAAU,eAAeQ,KAAK,iBAAiBO,aAAc9E,EAAUmF,eAAgBnF,EAAUoF,MAAM,sBAAsBd,SA7DxJ,WAChBrE,GAAWD,GACXG,EAAW,CAAC,EACf,OA4DmB,iBAAK4D,UAAY/D,EAAsB,KAAX,SAA5B,WACI,iBAAK+D,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,MAApB,sBAAkC,mDAA8BnF,EAAKmD,QAAnC,QAAoDnD,EAAKiD,QAAzD,QAAyE,iBAAM+B,UAAU,cAAhB,mBAC3G,SAAC,KAAD,CAAYa,KAAK,SAASC,YAAY,iBAAiBQ,KAAM,KAAY7G,IAAKO,EAAKmD,QAASxD,IAAKK,EAAKiD,QAASuC,KAAK,MAAMD,SAAU,SAAC3D,GAAD,OAAOpB,GAAU,SAAC+F,GAAQ,OAAO,kBAAKA,GAAZ,IAAelG,IAAKuB,EAAEE,OAAOsD,OAAS,GAAhE,EAAmEA,MAAO7E,EAAOF,IAAKoF,SAAUxE,KACpO,kBAAM+D,UAAU,aAAhB,+DAAmFhF,EAAKmD,QAAxF,QAAyGnD,EAAKiD,QAA9G,WAEJ,iBAAK+B,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,MAApB,uBAAmC,mDAA8BnF,EAAKoD,QAAnC,QAAoDpD,EAAKkD,QAAzD,QAAyE,iBAAM8B,UAAU,cAAhB,mBAC5G,SAAC,KAAD,CAAYa,KAAK,SAASC,YAAY,kBAAkBQ,KAAM,KAAY3G,IAAKK,EAAKkD,QAASzD,IAAKO,EAAKoD,QAASoC,KAAK,MAAMD,SAAU,SAAC3D,GAAD,OAAOpB,GAAU,SAAC+F,GAAQ,OAAO,kBAAKA,GAAZ,IAAejG,IAAKsB,EAAEE,OAAOsD,OAAS,GAAhE,EAAmEA,MAAO7E,EAAOD,IAAKmF,SAAUxE,KACrO,kBAAM+D,UAAU,aAAhB,+DAAmFhF,EAAKoD,QAAxF,QAAyGpD,EAAKkD,QAA9G,WAEJ,gBAAK8B,UAAU,OAAf,UACI,gBAAK5C,GAAG,cAIhB,gBAAK4C,UAAU,OAAf,UACI,SAAC,KAAD,CAASa,KAAK,SAASW,MAAM,UAAUxB,UAAU,OAAjD,+BAY3B,C,uECjNc,SAASyB,EAA2BC,EAAGC,GACpD,IAAIC,EAAuB,qBAAXC,QAA0BH,EAAEG,OAAOC,WAAaJ,EAAE,cAClE,IAAKE,EAAI,CACP,GAAIG,MAAMC,QAAQN,KAAOE,GAAK,OAA2BF,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEpB,OAAqB,CAC/GsB,IAAIF,EAAIE,GACZ,IAAIK,EAAI,EACJC,EAAI,WAAc,EACtB,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKP,EAAEpB,OAAe,CACxB+B,MAAM,GAED,CACLA,MAAM,EACNjC,MAAOsB,EAAEO,KAEb,EACArF,EAAG,SAAW0F,GACZ,MAAMA,CACR,EACAC,EAAGL,EAEP,CACA,MAAM,IAAIM,UAAU,wIACtB,CACA,IAEEC,EAFEC,GAAmB,EACrBC,GAAS,EAEX,MAAO,CACLR,EAAG,WACDP,EAAKA,EAAGgB,KAAKlB,EACf,EACAU,EAAG,WACD,IAAId,EAAOM,EAAGiB,OAEd,OADAH,EAAmBpB,EAAKe,KACjBf,CACT,EACA1E,EAAG,SAAWkG,GACZH,GAAS,EACTF,EAAMK,CACR,EACAP,EAAG,WACD,IACOG,GAAoC,MAAhBd,EAAW,QAAWA,EAAW,QAG5D,CAFE,QACA,GAAIe,EAAQ,MAAMF,CACpB,CACF,EAEJ,C","sources":["components/CameraEdit.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React from 'react';\r\nimport * as L from \"leaflet\";\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CFormSelect, CFormTextarea, CButton, CFormSwitch } from \"@coreui/react\";\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport Constants, { userToken, setSessionMessage } from 'src/Constants';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useUserStore } from 'src/userStore';\r\nimport Sniper from '../assets/images/sniper.png'\r\n\r\nconst getMiddle = (prop, markers) => {\r\n    let values = markers.map(m => m[prop]);\r\n    let min = Math.min(...values);\r\n    let max = Math.max(...values);\r\n    if (prop === 'lon' && (max - min > 180)) {\r\n        values = values.map(val => val < max - 180 ? val + 360 : val);\r\n        min = Math.min(...values);\r\n        max = Math.max(...values);\r\n    }\r\n    let result = (min + max) / 2;\r\n    if (prop === 'lon' && result > 180) {\r\n        result -= 360\r\n    }\r\n    return result;\r\n}\r\n\r\nconst findCenter = (markers) => {\r\n    return {\r\n        lat: getMiddle('lat', markers),\r\n        lon: getMiddle('lon', markers)\r\n    }\r\n}\r\n\r\nconst CameraEdit = () => {\r\n\r\n    const location = useLocation();\r\n    const user = useUserStore((state) => state.user);\r\n    const zoom = React.useRef(15);\r\n    const [latlon, setLatlon] = React.useState({ lat: location.state.lat, lon: location.state.lon });\r\n    const navigate = useNavigate();\r\n    const [jurisdictions, setJurisdictions] = React.useState([]);\r\n    const [selected, setSelected] = React.useState(location.state.jurisdiction)\r\n    const [isActive, setActive] = React.useState(location.state.display_status);\r\n    const [loading, setLoading] = React.useState({});\r\n\r\n    const parseFormtoJson = (form) => {\r\n        let formData = new FormData(form);\r\n        let data = {}\r\n        for(let keyValue of formData) {\r\n            data[keyValue[0]] = keyValue[1]\r\n        }\r\n\r\n        return data;\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n        data.lat = parseFloat(data.lat)\r\n        data.lon = parseFloat(data.lon)\r\n        console.log(data)\r\n        let url = Constants.updateCameras + location.state.id;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n\r\n        if (json.status === 200) {\r\n            navigate('/cameras')\r\n            setSessionMessage('success', 'Record Inserted Successfully')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        let centerPoint = findCenter([{ lat: user.max_lat, lon: user.max_lon }, { lat: user.min_lat, lon: user.min_lon }])\r\n        let map = L.map(\"map\").setView([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], zoom.current);\r\n        map.on('zoomend', (e) => {\r\n            zoom.current = map.getZoom();\r\n        })\r\n        L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png?lang=en\", {}).addTo(map);\r\n        let marker = L.marker([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], {\r\n            draggable: true,\r\n            icon: L.icon({\r\n                iconUrl: Sniper,\r\n                iconSize: [50, 50],\r\n                iconAnchor: [0, 0],\r\n            })\r\n        }).on('dragend', () => {\r\n            let { lat, lng } = marker.getLatLng()\r\n            if (lat > user.max_lat || lat < user.min_lat || lng > user.max_lon || lng < user.min_lon) {\r\n                setLatlon({ ...latlon })\r\n                return;\r\n            }\r\n\r\n            setLatlon({ lat: lat.toFixed(4), lon: lng.toFixed(4) })\r\n        }).addTo(map)\r\n        return () => {\r\n            map.remove()\r\n        }\r\n    }, [latlon, user, loading])\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let response = await fetch(Constants.jurisdictionList + `?per_page=100&page_number=1`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let payload = await response.json()\r\n            setJurisdictions(payload.data);\r\n        })();\r\n    }, [])\r\n    const toggleClass = () => {\r\n        setActive(!isActive);\r\n        setLoading({});\r\n    };\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n\r\n\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Update Cameras</h5>\r\n                    <Link to=\"/cameras\" className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</Link>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                    <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Jurisdiction<span className=\"text-danger\">*</span></CFormLabel>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter Jurisdiction\" name=\"jurisdiction\" required /> */}\r\n                            <CFormSelect\r\n                                className='form-control'\r\n                                value={selected}\r\n                                disabled={jurisdictions.length < 2}\r\n                                onChange={(e) => setSelected(e.target.value)}\r\n                                name='jurisdiction'\r\n                                required>\r\n                                {jurisdictions.map((item, index) => (\r\n                                    <option value={item.short_name} key={index}>{item.name}</option>\r\n                                ))}\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Display Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Enter Your Name\" name=\"name\" required defaultValue={location.state.name} />\r\n                        </div>\r\n                        \r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"address\">Address<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"address\" required defaultValue={location.state.address}></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Camera Id<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Unique Camera Id\" name=\"unique_id\" required defaultValue={location.state.unique_id} />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormSwitch size=\"xl\" className='form-control' name='display_status' defaultValue={isActive} defaultChecked={isActive} label=\"Display on Frontend\" onChange={toggleClass} />\r\n                        </div>\r\n                        <div className={!isActive ? \"d-none\" : null}>\r\n                            <div className=\"mb-3\">\r\n                                <CFormLabel htmlFor=\"lat\">Latitude<span> (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                                <CFormInput type=\"number\" placeholder=\"Enter Latitude\" step={0.00000001} min={user.min_lat} max={user.max_lat} name=\"lat\" onChange={(e) => setLatlon((p) => { return { ...p, lat: e.target.value } })} value={latlon.lat} required={isActive} />\r\n                                <span className='error_text'>It should be a valid  Latitude (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span>\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <CFormLabel htmlFor=\"lon\">Longitude<span> (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                                <CFormInput type=\"number\" placeholder=\"Enter Longitude\" step={0.00000001} max={user.max_lon} min={user.min_lon} name=\"lon\" onChange={(e) => setLatlon((p) => { return { ...p, lon: e.target.value } })} value={latlon.lon} required={isActive} />\r\n                                <span className='error_text'>It should be a valid Longitude (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span>\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <div id=\"map\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Update\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default CameraEdit;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["getMiddle","prop","markers","values","map","m","min","Math","max","val","result","location","useLocation","user","useUserStore","state","zoom","React","lat","lon","latlon","setLatlon","navigate","useNavigate","jurisdictions","setJurisdictions","jurisdiction","selected","setSelected","display_status","isActive","setActive","loading","setLoading","parseFormtoJson","form","formData","FormData","data","keyValue","handleSubmit","e","preventDefault","target","parseFloat","console","log","url","Constants","id","fetch","method","headers","userToken","body","JSON","stringify","response","json","status","setSessionMessage","centerPoint","max_lat","max_lon","min_lat","min_lon","L","setView","current","on","getZoom","addTo","marker","draggable","icon","iconUrl","Sniper","iconSize","iconAnchor","getLatLng","lng","toFixed","remove","payload","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","className","to","onSubmit","htmlFor","value","disabled","length","onChange","name","required","item","index","short_name","type","placeholder","defaultValue","rows","address","unique_id","size","defaultChecked","label","step","p","color","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","_e","f","TypeError","err","normalCompletion","didErr","call","next","_e2"],"sourceRoot":""}