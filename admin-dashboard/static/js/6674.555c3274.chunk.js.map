{"version":3,"file":"static/js/6674.555c3274.chunk.js","mappings":"wRA2HA,UAlHyB,WAErB,MAA4BA,EAAAA,SAAe,IAA3C,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAkB,SAACC,GACrB,IAAIC,EAASD,EAAKE,iBAAiB,iBAC/BC,EAAO,CAAC,EAKZ,OAJAF,EAAOG,SAAQ,SAACC,GACZF,EAAKE,EAAMC,MAAQD,EAAME,KAC5B,IAEMJ,CACV,EACKK,EAAY,yCAAG,WAAOC,GAAP,uFACjBA,EAAEC,iBACEP,EAAOJ,EAAgBU,EAAEE,QAEzBC,EAAMC,EAAAA,GAAAA,sBAJO,SAKIC,MAAMF,EAAK,CAC5BG,OAAQ,OACRC,QAAS,CACL,eAAiBC,EAAAA,EAAAA,MACjB,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUjB,KAXR,cAKbkB,EALa,gBAaAA,EAASC,OAbT,OAcG,MAdH,OAcRC,SACL1B,EAAS,0BACT2B,EAAAA,EAAAA,IAAkB,UAAW,iCAhBhB,4CAAH,sDAoClB,OAfA9B,EAAAA,WAAgB,YACZ,uBAAC,oGACOkB,EAAMC,EAAAA,GAAAA,YADb,SAEwBC,MAAMF,EAAI,CAC3BI,QAAS,CACLS,eAAeR,EAAAA,EAAAA,SAJ1B,cAEOI,EAFP,gBAOoBA,EAASC,OAP7B,OAOOnB,EAPP,OASGP,EAAUO,EAAKA,MATlB,0CAAD,EAWH,GAAE,KAKC,iCACI,SAAC,KAAD,CACIuB,SAAS,YACTC,MAAM,UACNC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,KAChB,SAAC,KAAD,CAAOC,UAAU,OAAjB,UACI,UAAC,KAAD,YACI,eAAIA,UAAU,0BAAd,sCACA,iBAAMC,QAAS,kBAAMxC,GAAU,EAAhB,EAAoBuC,UAAU,0DAA7C,wBAIR,SAAC,KAAD,WACI,SAAC,KAAD,WACI,UAAC,KAAD,CAAOE,SAAU9B,EAAjB,WACI,iBAAK4B,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,OAApB,0BAAuC,iBAAMH,UAAU,cAAhB,mBAEvC,UAAC,KAAD,CAAa9B,KAAK,YAAY8B,UAAU,eAAxC,WACI,mBAAQ7B,MAAM,GAAGiC,QAAM,EAAvB,iCADJ,OAGQ7C,QAHR,IAGQA,OAHR,EAGQA,EAAQ8C,KAAI,SAACC,GACT,OACI,mBAAsBnC,MAAOmC,EAAKC,GAAlC,SAAuCD,EAAKpC,MAA/BoC,EAAKC,GAEzB,WAIb,iBAAKP,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,kBAApB,6BAAqD,iBAAMH,UAAU,cAAhB,mBACtD,SAAC,KAAD,CAAYQ,KAAK,SAAStC,KAAK,iBAAiBuC,IAAI,IAAIC,UAAQ,EAACC,YAAY,OAC7E,iBAAMX,UAAU,aAAhB,0CAGH,iBAAKA,UAAU,OAAf,WACI,UAAC,KAAD,CAAYG,QAAQ,QAApB,mBAAiC,iBAAMH,UAAU,cAAhB,mBAClC,SAAC,KAAD,CAAYQ,KAAK,SAAStC,KAAK,QAAQuC,IAAI,IAAIG,KAAM,KAAOF,UAAQ,EAACC,YAAY,OACjF,iBAAMX,UAAU,aAAhB,iEAGH,gBAAKA,UAAU,OAAf,UACI,SAAC,KAAD,CAASQ,KAAK,SAASK,MAAM,UAAUb,UAAU,OAAjD,+BAY3B,C","sources":["components/NotificationsAdd.js"],"sourcesContent":["import React from 'react';\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel,  CButton, CFormSelect } from \"@coreui/react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\n\r\n\r\n\r\nconst NotificationsAdd = () => {\r\n\r\n    const [camera, setCamera] = React.useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    const parseFormtoJson = (form) => {\r\n        let inputs = form.querySelectorAll('.form-control');\r\n        let data = {}\r\n        inputs.forEach((input) => {\r\n            data[input.name] = input.value\r\n        })\r\n\r\n        return data;\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n\r\n        let url = Constants.cameraNotificationAdd;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n        if (json.status === 200) {\r\n            navigate('/camera/notifications')\r\n            setSessionMessage('success', 'Record Inserted Successfully')\r\n\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        (async()=>{\r\n            let url = Constants.cameraLists;\r\n            let response = await fetch(url,{\r\n                headers: {\r\n                    Authorization: userToken()\r\n                }\r\n            })\r\n            let data = await response.json();\r\n            // console.log(data);\r\n            setCamera(data.data);\r\n        })()\r\n    }, [])\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Camera Notification Add</h5>\r\n                    <span onClick={() => navigate(-1)} className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</span>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Display Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter the Display Name\" name=\"name\" required /> */}\r\n                            <CFormSelect name=\"camera_id\" className=\"form-control\">\r\n                                <option value=\"\" hidden>-- Select Camera --</option>\r\n                                {\r\n                                    camera?.map((cmra) => {\r\n                                        return(\r\n                                            <option key={cmra.id} value={cmra.id}>{cmra.name}</option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"expected_images\">Expected Images<span className=\"text-danger\">*</span></CFormLabel>\r\n                           <CFormInput type=\"number\" name=\"expected_image\" min=\"1\" required placeholder=\" \"/>\r\n                           <span className='error_text'>Must be a greater than 0</span>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"hours\">Hours<span className=\"text-danger\">*</span></CFormLabel>\r\n                           <CFormInput type=\"number\" name=\"hours\" min=\"0\" step={0.001} required placeholder=\" \"/>\r\n                           <span className='error_text'>Must be a valid positive number(upto 2 decimal)</span>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Create\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default NotificationsAdd;"],"names":["React","camera","setCamera","navigate","useNavigate","parseFormtoJson","form","inputs","querySelectorAll","data","forEach","input","name","value","handleSubmit","e","preventDefault","target","url","Constants","fetch","method","headers","userToken","body","JSON","stringify","response","json","status","setSessionMessage","Authorization","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","className","onClick","onSubmit","htmlFor","hidden","map","cmra","id","type","min","required","placeholder","step","color"],"sourceRoot":""}