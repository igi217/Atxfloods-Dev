{"version":3,"file":"static/js/3494.992972f2.chunk.js","mappings":"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","sources":["components/CrossingAdd.js"],"sourcesContent":["import React from 'react';\r\nimport * as L from \"leaflet\";\r\nimport { CCard, CCardBody, CForm, CFormInput, CFormLabel, CFormTextarea, CFormSelect, CButton } from \"@coreui/react\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport Constants, { setSessionMessage, userToken } from 'src/Constants';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useUserStore } from 'src/userStore';\r\nimport Sniper from '../assets/images/sniper.png';\r\n\r\nconst getMiddle = (prop, markers) => {\r\n    let values = markers.map(m => m[prop]);\r\n    let min = Math.min(...values);\r\n    let max = Math.max(...values);\r\n    if (prop === 'lon' && (max - min > 180)) {\r\n        values = values.map(val => val < max - 180 ? val + 360 : val);\r\n        min = Math.min(...values);\r\n        max = Math.max(...values);\r\n    }\r\n    let result = (min + max) / 2;\r\n    if (prop === 'lon' && result > 180) {\r\n        result -= 360\r\n    }\r\n    return result;\r\n}\r\n\r\nconst findCenter = (markers) => {\r\n    return {\r\n        lat: getMiddle('lat', markers),\r\n        lon: getMiddle('lon', markers)\r\n    }\r\n}\r\nconst CrossingAdd = () => {\r\n\r\n\r\n\r\n    const navigate = useNavigate();\r\n    const user = useUserStore((state) => state.user);\r\n    const zoom = React.useRef(15);\r\n    const [jurisdictions, setJurisdictions] = React.useState([]);\r\n    const [latlon, setLatlon] = React.useState({ lat: undefined, lon: undefined })\r\n    const parseFormtoJson = (form) => {\r\n        let inputs = form.querySelectorAll('.form-control');\r\n        let data = {}\r\n        inputs.forEach((input) => {\r\n            data[input.name] = input.value\r\n        })\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        let centerPoint = findCenter([{ lat: user.max_lat, lon: user.max_lon }, { lat: user.min_lat, lon: user.min_lon }])\r\n        let map = L.map(\"map\").setView([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], zoom.current);\r\n        L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png?lang=en\", {}).addTo(map);\r\n        map.on('zoomend', (e) => {\r\n            zoom.current = map.getZoom();\r\n        })\r\n        let marker = L.marker([latlon.lat || centerPoint.lat, latlon.lon || centerPoint.lon], {\r\n            draggable: true,\r\n            icon: L.icon({\r\n                iconUrl: Sniper,\r\n                iconSize: [50, 50],\r\n                iconAnchor: [0, 0],\r\n            })\r\n        }).on('dragend', () => {\r\n            let { lat, lng } = marker.getLatLng()\r\n            if (lat > user.max_lat || lat < user.min_lat || lng > user.max_lon || lng < user.min_lon) {\r\n                setLatlon({ ...latlon })\r\n                return;\r\n            }\r\n\r\n            setLatlon({ lat: lat.toFixed(4), lon: lng.toFixed(4) })\r\n        }).addTo(map)\r\n        return () => {\r\n            map.remove()\r\n        }\r\n    }, [latlon, user])\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            let response = await fetch(Constants.jurisdictionList + `?per_page=100&page_number=1`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': userToken(),\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let payload = await response.json()\r\n            setJurisdictions(payload.data);\r\n        })();\r\n    }, [])\r\n\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        let data = parseFormtoJson(e.target);\r\n        data.status = parseInt(data.status)\r\n        data.lat = parseFloat(data.lat)\r\n        data.lon = parseFloat(data.lon)\r\n\r\n        let url = Constants.createCrossing;\r\n        let response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': userToken(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        let json = await response.json();\r\n\r\n        if (json.status === 200) {\r\n            navigate(-1)\r\n            setSessionMessage('success', 'Record Created Successfully')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                theme=\"colored\"\r\n                autoClose={5000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover />\r\n            <CCard className=\"my-2\">\r\n                <CCardBody>\r\n                    <h5 className=\"d-inline text-uppercase\">Add Crossing</h5>\r\n                    <Link to=\"/crossings\" className=\"btn text-uppercase btn-sm px-4  btn-primary float-right\">Back</Link>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            <CCard>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Jurisdiction<span className=\"text-danger\">*</span></CFormLabel>\r\n                            {/* <CFormInput type=\"text\" placeholder=\"Enter Jurisdiction\" name=\"jurisdiction\" required /> */}\r\n                            <CFormSelect\r\n                                className='form-control'\r\n                                name='jurisdiction'\r\n                                required>\r\n                                {jurisdictions.map((item, index) => (\r\n                                    <option value={item.short_name} key={index}>{item.name}</option>\r\n                                ))}\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"name\">Crossing Name<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"text\" placeholder=\"Enter Crossing Name\" name=\"name\" required />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"address\">Address<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"address\" required></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lat\">Latitude<span> (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Latitude\" step={0.00000001} min={user.min_lat} max={user.max_lat} name=\"lat\" onChange={(e) => setLatlon((p) => { return { ...p, lat: e.target.value } })} value={latlon.lat} required />\r\n                            <span className='error_text'>It should be a valid  Latitude (Allowed Range : &gt; {user.min_lat} & &lt; {user.max_lat})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"lon\">Longitude<span> (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span><span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormInput type=\"number\" placeholder=\"Enter Longitude\" step={0.00000001} max={user.max_lon} min={user.min_lon} name=\"lon\" onChange={(e) => setLatlon((p) => { return { ...p, lon: e.target.value } })} value={latlon.lon} required />\r\n                            <span className='error_text'>It should be a valid Longitude (Allowed Range : &gt; {user.min_lon} & &lt; {user.max_lon})</span>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <div id=\"map\"></div>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"comment\">Comments</CFormLabel>\r\n                            <CFormTextarea rows=\"3\" name=\"comment\"></CFormTextarea>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CFormLabel htmlFor=\"status\">Status<span className=\"text-danger\">*</span></CFormLabel>\r\n                            <CFormSelect className='form-control' aria-label=\"Default select example\" name=\"status\" required>\r\n                                <option hidden>Select Status</option>\r\n                                <option value=\"0\">Closed</option>\r\n                                <option value=\"1\">Open</option>\r\n                                <option value=\"2\">Caution</option>\r\n                                <option value=\"3\">Long time closure</option>\r\n                            </CFormSelect>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <CButton type='submit' color=\"primary\" className=\"px-4\">\r\n                                Create\r\n                            </CButton>\r\n                        </div>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\nexport default CrossingAdd;"],"names":["getMiddle","prop","markers","values","map","m","min","Math","max","val","result","navigate","useNavigate","user","useUserStore","state","zoom","React","jurisdictions","setJurisdictions","lat","undefined","lon","latlon","setLatlon","parseFormtoJson","form","inputs","querySelectorAll","data","forEach","input","name","value","centerPoint","max_lat","max_lon","min_lat","min_lon","L","setView","current","addTo","on","e","getZoom","marker","draggable","icon","iconUrl","Sniper","iconSize","iconAnchor","getLatLng","lng","toFixed","remove","fetch","Constants","method","headers","userToken","response","json","payload","handleSubmit","preventDefault","target","status","parseInt","parseFloat","url","body","JSON","stringify","setSessionMessage","position","theme","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","className","to","onSubmit","htmlFor","required","item","index","short_name","type","placeholder","rows","step","onChange","p","id","hidden","color"],"sourceRoot":""}