{"version":3,"file":"static/js/866.690ce68e.chunk.js","mappings":"4OAuFA,UA/EqB,WAGnB,IAQA,EAAkCA,EAAAA,SAAe,IAAjD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,EAAAA,SAAe,MAAnD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA0BC,EAAAA,EAAAA,MAA1B,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsBC,EAAAA,EAAAA,MAAtB,eAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BV,EAAAA,UAAe,GAA7C,eAAOW,EAAP,KAAgBC,EAAhB,KAEMC,GAAaC,EAAAA,EAAAA,UACnBd,EAAAA,WAAgB,WACd,IAAIe,EAAMC,EAAAA,EAAAA,UACNC,EAAWR,EAAMS,OAAOC,OAAOV,EAAIQ,UAAY,CAAC,WAAY,UAC5DG,EAAOX,EAAMA,EAAIW,KAAO,GACxBC,EAAMC,EAAAA,IAAM,OAAOC,QAAQN,EAAUG,EAAM,CAAEI,QAAS,KA8B1D,OA7BA,uBAAC,+GACsBC,MAAMV,GAD5B,cACKW,EADL,gBAEkBA,EAASC,OAF3B,OAEKC,EAFL,OAGChB,GAAW,GACPiB,EAAU,IAAIC,EAAAA,mBAAqB,CAAEC,iBAAkB,KAI3DH,EAAKI,WAAWC,SAAQ,SAACC,EAAUC,GACjC,IA7BQC,EA6BJC,EAASf,EAAAA,OAAS,CAACY,EAASI,IAAKJ,EAASK,KAAM,CAClDC,MA9BMJ,EA8BKF,EAASO,OA7BnBnB,EAAAA,KAAO,CACZoB,QAAQ,eAAD,OAAiBN,EAAjB,QACPO,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,EAAG,QA2BXC,GAAG,SAAS,kBAAMzC,EAAc+B,EAApB,IACfN,EAAQiB,SAAST,EAClB,IAEA,OAADf,QAAC,IAADA,GAAA,UAAAA,EAAAA,UAAa,mGACX,CAAC,UADH,SAEMyB,MACF1B,GAEJA,EAAIyB,SAASjB,GACbR,EAAIwB,GAAG,aAAa,WAClB,IAAIzB,EAAOC,EAAI2B,UACX/B,EAAWI,EAAI4B,YAEnBpC,EAAWqC,QAAU,CAAE9B,KAAAA,EAAMH,SAAAA,EAC9B,IACDf,EAAa0B,GA3Bd,2CAAD,GA6BO,WACLP,EAAI8B,QACL,CAEF,GAAE,CAAC1C,IAKJ,OACE,iCACE,iBAAK2C,GAAG,MAAR,WACE,SAAC,IAAD,CAAeC,QANI,SAACC,GACxB5C,EAAOG,EAAWqC,QACnB,IAKMvC,GAAU,SAAC,IAAD,KAAc,4BAE3B,SAAC,IAAD,CACEiB,KAAM3B,EACNmD,GAAIjD,EACJoD,MAAOnD,EACPoD,QAAQ,EACRjD,UAAWA,EACXD,KAAMA,EACNmD,QAAQ,yBAGf,C","sources":["components/CrossingsMap.js"],"sourcesContent":["import * as L from \"leaflet\";\r\nimport * as M from \"leaflet.markercluster\";\r\nimport React, { useRef } from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport DetailCard from \"./DetailCard\";\r\nimport { useDefaultPan, useFavourite } from \"../hooks\";\r\nimport DefaultButton from \"./DefaultButton\";\r\nimport Spinner from \"../Utils/Spinner\";\r\nconst CrossingsMap = () => {\r\n\r\n\r\n  const Icon = (state) => {\r\n    return L.icon({\r\n      iconUrl: `/static/svg/${state}.png`,\r\n      iconSize: [20, 20],\r\n      iconAnchor: [0, 0],\r\n    });\r\n  };\r\n\r\n  const [crossings, setcrossings] = React.useState([]);\r\n  const [selectedId, setSelectedId] = React.useState(null);\r\n  const [favs, toggleFav] = useFavourite()\r\n  const [pan, setPan] = useDefaultPan()\r\n  const [loading, setLoading] = React.useState(true);\r\n\r\n  const defaultRef = useRef()\r\n  React.useEffect(() => {\r\n    let url = Constants.crossings;\r\n    let position = pan ? Object.values(pan.position) : [30.266666, -97.73333]\r\n    let zoom = pan ? pan.zoom : 10;\r\n    let map = L.map(\"map\").setView(position, zoom, { maxZoom: 18 });\r\n    (async () => {\r\n      let response = await fetch(url);\r\n      let data = await response.json();\r\n      setLoading(false);\r\n      let markers = new M.MarkerClusterGroup({ maxClusterRadius: 10 });\r\n\r\n      // console.log(data);\r\n\r\n      data.attributes.forEach((location, index) => {\r\n        let marker = L.marker([location.lat, location.lon], {\r\n          icon: Icon(location.status),\r\n        }).on(\"click\", () => setSelectedId(index));\r\n        markers.addLayer(marker)\r\n      });\r\n\r\n      L?.tileLayer(\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\",\r\n        {\r\n        })?.addTo(\r\n          map\r\n        );\r\n      map.addLayer(markers)\r\n      map.on(\"mousemove\", () => {\r\n        let zoom = map.getZoom()\r\n        let position = map.getCenter()\r\n\r\n        defaultRef.current = { zoom, position }\r\n      })\r\n      setcrossings(data);\r\n    })();\r\n    return () => {\r\n      map.remove()\r\n    }\r\n\r\n  }, [pan]);\r\n\r\n  const handleSetDefault = (e) => {\r\n    setPan(defaultRef.current)\r\n  }\r\n  return (\r\n    <>\r\n      <div id=\"map\">\r\n        <DefaultButton onClick={handleSetDefault} />\r\n        {loading ? <Spinner /> : <></>}\r\n      </div>\r\n      <DetailCard\r\n        data={crossings}\r\n        id={selectedId}\r\n        setId={setSelectedId}\r\n        header={true}\r\n        toggleFav={toggleFav}\r\n        favs={favs}\r\n        content=\"CROSSINGS ARE OPEN\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CrossingsMap;\r\n"],"names":["React","crossings","setcrossings","selectedId","setSelectedId","useFavourite","favs","toggleFav","useDefaultPan","pan","setPan","loading","setLoading","defaultRef","useRef","url","Constants","position","Object","values","zoom","map","L","setView","maxZoom","fetch","response","json","data","markers","M","maxClusterRadius","attributes","forEach","location","index","state","marker","lat","lon","icon","status","iconUrl","iconSize","iconAnchor","on","addLayer","addTo","getZoom","getCenter","current","remove","id","onClick","e","setId","header","content"],"sourceRoot":""}